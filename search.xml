<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Nginx 代理 TCP协议 MySQL连接</title>
      <link href="/post/ec9803e6.html"/>
      <url>/post/ec9803e6.html</url>
      
        <content type="html"><![CDATA[<p>使用nginx代理mysql连接有个好处就是，如果做了容灾处理的话, 可以瞬间平滑切换到可用服务上。</p><p>1.vi /etc/nginx/nginx.conf ,在 http{} 结构体外(也就是文件末尾)添加如下配置：</p><pre class="line-numbers language-none"><code class="language-none">stream &#123;    upstream cloudsocket &#123;       hash $remote_addr consistent;       server 192.168.182.155:3306 weight&#x3D;5 max_fails&#x3D;3 fail_timeout&#x3D;30s;    &#125;    server &#123;       listen 3306;#数据库服务器监听端口       proxy_connect_timeout 10s;       proxy_timeout 300s;#设置客户端和代理服务之间的超时时间，如果5分钟内没操作将自动断开。       proxy_pass cloudsocket;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.systemctl restart nginx ，重启nginx。</p><p></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle错误ORA-12541</title>
      <link href="/post/60810f4e.html"/>
      <url>/post/60810f4e.html</url>
      
        <content type="html"><![CDATA[<p>如果数据库正常运行中，可能是被数据库服务器防火墙拦截。</p><p>常见ORA-12514错误：</p><h4 id="ORA-12541-TNS-没有监听器"><a href="#ORA-12541-TNS-没有监听器" class="headerlink" title="ORA-12541: TNS: 没有监听器"></a>ORA-12541: TNS: 没有监听器</h4><p>显而易见，服务器端的监听器没有启动，另外检查客户端IP地址或端口填写是否正确。启动监听器：<br>$ lsnrctl start或<br>C:lsnrctl start</p><h4 id="ORA-12154-TNS-无法处理服务名"><a href="#ORA-12154-TNS-无法处理服务名" class="headerlink" title="ORA-12154: TNS: 无法处理服务名"></a>ORA-12154: TNS: 无法处理服务名</h4><p>检查输入的服务名与配置的服务名是否一致。另外注意生成的本地服务名文件(Windows下如D:oracleora92networkadmin tnsnames.ora，Linux/Unix下/network/admin/tnsnames.ora)里每项服务的首 行服务名称前不能有空格。</p><h4 id="ORA-12514-TNS-监听进程不能解析在连接描述符中给出的SERVICE-NAME"><a href="#ORA-12514-TNS-监听进程不能解析在连接描述符中给出的SERVICE-NAME" class="headerlink" title="ORA-12514: TNS: 监听进程不能解析在连接描述符中给出的SERVICE_NAME"></a>ORA-12514: TNS: 监听进程不能解析在连接描述符中给出的SERVICE_NAME</h4><p>打开Net Manager，选中服务名称，检查服务标识栏里的服务名输入是否正确。该服务名必须与服务器端监听器配置的全局数据库名一致。同时检查sqlnet.ora，例如如果想要采用简便连接方式连接就需要在NAMES.DIRECTORY_PATH参数中添加EZCONNECT。</p><h4 id="Ora-12514：TNS：监听程序当前无法识别链接描述符中请求的服务"><a href="#Ora-12514：TNS：监听程序当前无法识别链接描述符中请求的服务" class="headerlink" title="Ora-12514：TNS：监听程序当前无法识别链接描述符中请求的服务"></a>Ora-12514：TNS：监听程序当前无法识别链接描述符中请求的服务</h4><p>该问题是由于缺少监听器的SID_LIST描述项引起的，采用netca进行配置的时候经常会遇到该问题，listener.ora示例如下</p><pre class="line-numbers language-none"><code class="language-none">SID_LIST_LISTENER &#x3D;(SID_LIST &#x3D;(SID_DESC &#x3D;(SID_NAME &#x3D; PLSExtProc)(ORACLE_HOME &#x3D; &#x2F;opt&#x2F;oracle&#x2F;product&#x2F;9.2.0.4)(PROGRAM &#x3D; extproc))(SID_DESC &#x3D;(GLOBAL_DBNAME &#x3D; SAMPLE.COM)(ORACLE_HOME &#x3D; &#x2F;opt&#x2F;oracle&#x2F;product&#x2F;9.2.0.4)(SID_NAME &#x3D; SAMPLE)))LISTENER &#x3D;(DESCRIPTION_LIST &#x3D;(DESCRIPTION &#x3D;(ADDRESS_LIST &#x3D;(ADDRESS &#x3D; (PROTOCOL &#x3D; TCP)(HOST &#x3D; tcy.com)(PORT &#x3D; 1521)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java substring() 方法</title>
      <link href="/post/c6f8b52f.html"/>
      <url>/post/c6f8b52f.html</url>
      
        <content type="html"><![CDATA[<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-none"><code class="language-none">public String substring(int beginIndex)或public String substring(int beginIndex, int endIndex)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>beginIndex</strong> – 起始索引（包括）, 索引从 0 开始。</li><li><strong>endIndex</strong> – 结束索引（不包括）。</li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>子字符串。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunoobTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> <span class="token class-name">Str</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"This is text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"返回值 :"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Str</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"返回值 :"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Str</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上程序执行结果为：</p><pre class="line-numbers language-none"><code class="language-none">返回值 : is text返回值 : is te<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo一篇文章多个categories</title>
      <link href="/post/c070f515.html"/>
      <url>/post/c070f515.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  在很多情况下，我们希望在 Hexo 中写的一篇文章能够同时属于多个分类，例如我写一篇 《Servlet笔记》，我既想将它放在Java这个分类中，又想将它放入 Servlet 这个分类。</p><p>  按照官方的解释，<code>categories</code> 这个选项有两种配置方法（其实有三种）。那我们就来讲讲这三种配置方法。</p><h2 id="子分类"><a href="#子分类" class="headerlink" title="子分类"></a>子分类</h2><p>下面的分类会将该分章放到 <code>Java/Servlet</code>这个分类下。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">categories</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Java  <span class="token punctuation">-</span> Servlet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同样的作用我们也可以这样写。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">categories</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Java<span class="token punctuation">,</span> Servlet<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面两种方法最终效果一样，都是将文章放在了一个子分类的目录下，效果如图。</p><p> <img src="/post/c070f515/1.png"></p><h2 id="多个分类"><a href="#多个分类" class="headerlink" title="多个分类"></a>多个分类</h2><p>如果我们的要求是将文章同时分到多个不同的分类中呢，我们应该这样：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">categories</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span><span class="token punctuation">[</span>Java<span class="token punctuation">]</span>  <span class="token punctuation">-</span><span class="token punctuation">[</span>Servlet<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样，就可以将上面的文章分类到 <code>Java</code> 和 <code>Servlet</code> 这两个不同的目录中了。</p><p>扩展一下，如果我们将其分类到 <code>Java/Servlet</code> 和 <code>Programming</code> 两个不同的目录下，我们应该如下写：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">categories</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span><span class="token punctuation">[</span>Java<span class="token punctuation">,</span> Servlet<span class="token punctuation">]</span>  <span class="token punctuation">-</span><span class="token punctuation">[</span>Programming<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多分类 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装Oracle并创建表空间，用户，赋权限</title>
      <link href="/post/66f4ba65.html"/>
      <url>/post/66f4ba65.html</url>
      
        <content type="html"><![CDATA[<p>docker 安装Oracle</p><h4 id="1、拉取镜像"><a href="#1、拉取镜像" class="headerlink" title="1、拉取镜像"></a>1、拉取镜像</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker iamges<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、创建并容器信息"><a href="#2、创建并容器信息" class="headerlink" title="2、创建并容器信息"></a>2、创建并容器信息</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d -p <span class="token number">1521</span>:1521 --name oracle_11g registry.aliyuncs.com/helowin/oracle_11g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于此处我的容器已经创建（命令如想，容器名称 oracle_11g）此处我直接启动即可。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker start oracle_11g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3、进入控制台设置用户信息"><a href="#3、进入控制台设置用户信息" class="headerlink" title="3、进入控制台设置用户信息"></a>3、进入控制台设置用户信息</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker <span class="token builtin class-name">exec</span> -it oracle_11g <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>登录sqlplus，此处发现sqlplus命令不可用，所以需要进行相关配置，操作步骤如下：</p><h5 id="（1）、切换到root用户模式下"><a href="#（1）、切换到root用户模式下" class="headerlink" title="（1）、切换到root用户模式下"></a>（1）、切换到root用户模式下</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">su</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入密码helowin</p><h5 id="（2）、编辑profile文件配置ORACLE环境变量"><a href="#（2）、编辑profile文件配置ORACLE环境变量" class="headerlink" title="（2）、编辑profile文件配置ORACLE环境变量"></a>（2）、编辑profile文件配置ORACLE环境变量</h5><p>vi /etc/profile 并在文件最后添加如下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ORACLE_HOME</span><span class="token operator">=</span>/home/oracle/app/oracle/product/11.2.0/dbhome_2<span class="token builtin class-name">export</span> <span class="token assign-left variable">ORACLE_SID</span><span class="token operator">=</span>helowin<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$ORACLE_HOME</span>/bin:<span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>推出并保存。</p><p>执行：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">source</span>   /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="（3）、软件连接"><a href="#（3）、软件连接" class="headerlink" title="（3）、软件连接"></a>（3）、软件连接</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ln</span> -s <span class="token variable">$ORACLE_HOME</span>/bin/sqlplus /usr/bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为我已经创建过所以包标志已存在。</p><h5 id="（4）、切换到oracle-用户"><a href="#（4）、切换到oracle-用户" class="headerlink" title="（4）、切换到oracle 用户"></a>（4）、切换到oracle 用户</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">su</span>  oracle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>登录sqlplus并修改sys、system用户密码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sqlplus /nologconn /as sysdba<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接着执行下面命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">alter user system identified by oracle<span class="token punctuation">;</span>alter user sys identified by oracle<span class="token punctuation">;</span>ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4、登录验证"><a href="#4、登录验证" class="headerlink" title="4、登录验证"></a>4、登录验证</h4><p>用sqlplus<br>在docker外面ip可以用127.0.0.1，如果需要远程访问的话，应该是宿主机IP，这点在以后进行测试。</p><p><strong>数据库连接后创建表空间并给创建用户，添加DBA权限</strong><br>oracle_sid: helowin</p><p>system ,sys password : oracle</p><p>docker oracle_11gdu:v1</p><p>–创建表空间</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span>  <span class="token keyword">tablespace</span>  tisdatafile <span class="token string">'/home/oracle/app/oracle/oradata/helowin/tis.dbf'</span>size <span class="token number">200</span>M autoextend <span class="token keyword">on</span> <span class="token keyword">next</span> <span class="token number">50</span>M<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>–在该表空间上创建用户</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">user</span> tis identified <span class="token keyword">by</span>  tis <span class="token keyword">default</span> <span class="token keyword">tablespace</span> tis<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>–给用户添加dba权限</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">grant</span> dba <span class="token keyword">to</span> tis <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卸载erlang</title>
      <link href="/post/cc6eb91f.html"/>
      <url>/post/cc6eb91f.html</url>
      
        <content type="html"><![CDATA[<p>直接删除软件目录即可</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">rm</span> -rf /usr/local/lib/erlang/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux字符编码默认为UTF-8，如出现乱码可设置为GBK</title>
      <link href="/post/5b87430c.html"/>
      <url>/post/5b87430c.html</url>
      
        <content type="html"><![CDATA[<p>Linux字符编码默认为UTF-8，如出现乱码可设置为GBK</p><h4 id="1-手动更改profile文件的命令"><a href="#1-手动更改profile文件的命令" class="headerlink" title="1.手动更改profile文件的命令"></a>1.手动更改profile文件的命令</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">vi</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以修改 /etc/sysconfig/i18n 文件，如</p><pre class="line-numbers language-none"><code class="language-none">LANG&#x3D;&quot;en_US.UTF-8&quot;LANG&#x3D;&quot;zh_CN.GB18030&quot;LANG&#x3D;&quot;zh_CN.GBK&quot;SUPPORTED&#x3D;&quot;zh_CN.UTF-8:zh_CN:zh&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一种方法 cp /etc/sysconfig/i18n $HOME/.i18n</p><p>修改 $HOME/.i18n 文件，如</p><pre class="line-numbers language-none"><code class="language-none">LANG&#x3D;&quot;en_US.UTF-8&quot;LANG&#x3D;&quot;zh_CN.GB18030&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样就可以改变个人的界面语言，而不影响别的用户<br>修改后的/etc/sysconfig/i18n 文件为：</p><pre class="line-numbers language-none"><code class="language-none">LANG&#x3D;&quot;en_US.UTF-8&quot;SUPPORTED&#x3D;&quot;zh_CN.GB18030:zh_CN:zh:en_US.UTF-8:en_US:en&quot;SYSFONT&#x3D;&quot;latarcyrheb-sun16&quot;LC_ALL&#x3D;&quot;en_US.UTF-8&quot;export LC_ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-在文件的末尾添加以下两行命令"><a href="#2-在文件的末尾添加以下两行命令" class="headerlink" title="2.在文件的末尾添加以下两行命令"></a>2.在文件的末尾添加以下两行命令</h4><pre class="line-numbers language-none"><code class="language-none">export LC_ALL&#x3D;&quot;zh_CN.GBK&quot;export LANG&#x3D;&quot;zh_CN.GBK&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>需要的配置主要有：<br>en_US.UTF-8 UTF-8<br>en_US ISO-8859-1<br>zh_CN GB2312<br>zh_CN.GB18030 GB18030<br>zh_CN.GBK GBK<br>zh_CN.UTF-8 UTF-8<br>默认为en_US.UTF-8 UTF-8</p><h4 id="3-也可在-root-bash-profile文件的末尾添加以下两行命令"><a href="#3-也可在-root-bash-profile文件的末尾添加以下两行命令" class="headerlink" title="3.也可在/root/.bash_profile文件的末尾添加以下两行命令"></a>3.也可在/root/.bash_profile文件的末尾添加以下两行命令</h4><pre class="line-numbers language-none"><code class="language-none">export LC_ALL&#x3D;&quot;zh_CN.GBK&quot;export LANG&#x3D;&quot;zh_CN.GBK&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重新启动服务器使更改生效。</p><h4 id="4-修改成功以后用locale命令查看，修改前的默认设置为"><a href="#4-修改成功以后用locale命令查看，修改前的默认设置为" class="headerlink" title="4.修改成功以后用locale命令查看，修改前的默认设置为"></a>4.修改成功以后用locale命令查看，修改前的默认设置为</h4><pre class="line-numbers language-none"><code class="language-none"># localeLANG&#x3D;en_US.UTF-8LC_CTYPE&#x3D;&quot;POSIX&quot;LC_NUMERIC&#x3D;&quot;POSIX&quot;LC_TIME&#x3D;&quot;POSIX&quot;LC_COLLATE&#x3D;&quot;POSIX&quot;LC_MONETARY&#x3D;&quot;POSIX &quot;LC_MESSAGES&#x3D;&quot;POSIX &quot;LC_PAPER&#x3D;&quot;POSIX &quot;LC_NAME&#x3D;&quot;POSIX &quot;LC_ADDRESS&#x3D;&quot;POSIX&quot;LC_TELEPHONE&#x3D;&quot;POSIX &quot;LC_MEASUREMENT&#x3D;&quot;POSIX &quot;LC_IDENTIFICATION&#x3D;&quot;POSIX &quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-修改成功以后的配置为"><a href="#5-修改成功以后的配置为" class="headerlink" title="5.修改成功以后的配置为"></a>5.修改成功以后的配置为</h4><pre class="line-numbers language-none"><code class="language-none"># localeLANG&#x3D;zh_CN.GBKLC_CTYPE&#x3D;&quot;zh_CN.GBKLC_NUMERIC&#x3D;&quot;zh_CN.GBK &quot;LC_TIME&#x3D;&quot;zh_CN.GBK &quot;LC_COLLATE&#x3D;&quot;zh_CN.GBKLC_MONETARY&#x3D;&quot;zh_CN.GBK &quot;LC_MESSAGES&#x3D;&quot;zh_CN.GBK &quot;LC_PAPER&#x3D;&quot;zh_CN.GBK &quot;LC_NAME&#x3D;&quot;zh_CN.GBK &quot;LC_ADDRESS&#x3D;&quot;zh_CN.GBK &quot;LC_TELEPHONE&#x3D;&quot;zh_CN.GBK &quot;LC_MEASUREMENT&#x3D;&quot;zh_CN.GBK &quot;LC_IDENTIFICATION&#x3D;&quot;zh_CN.GBK &quot;LC_ALL&#x3D;zh_CN.GBK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux阿里云服务器centos8操作系统安装mysql8.0详细教程</title>
      <link href="/post/ab6e9a9f.html"/>
      <url>/post/ab6e9a9f.html</url>
      
        <content type="html"><![CDATA[<h4 id="第一步：使用最新的包管理器安装MySQL"><a href="#第一步：使用最新的包管理器安装MySQL" class="headerlink" title="第一步：使用最新的包管理器安装MySQL"></a>第一步：使用最新的包管理器安装MySQL</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> dnf <span class="token function">install</span> @mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="第二步：设置开机自动启动"><a href="#第二步：设置开机自动启动" class="headerlink" title="第二步：设置开机自动启动"></a>第二步：设置开机自动启动</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> --now mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后检查mysql的启动状态</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> systemctl status mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="第三步：添加密码及安全设置"><a href="#第三步：添加密码及安全设置" class="headerlink" title="第三步：添加密码及安全设置"></a>第三步：添加密码及安全设置</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> mysql_secure_installation<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h4><p>要求你配置VALIDATE PASSWORD component（验证密码组件）： 输入y ，回车进入该配置<br>选择密码验证策略等级， 我这里选择0 （low），回车<br>输入新密码两次<br>确认是否继续使用提供的密码？输入y ，回车<br>移除匿名用户？ 输入y ，回车<br>不允许root远程登陆？ 我这里需要远程登陆，所以输入n ，回车</p><h4 id="第五步：用root用户登录验证试试"><a href="#第五步：用root用户登录验证试试" class="headerlink" title="第五步：用root用户登录验证试试"></a>第五步：用root用户登录验证试试</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入之后为了可以实现Windows电脑远程连接这台服务器上的数据库，那么需要设置如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">use mysql<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">update user <span class="token builtin class-name">set</span> <span class="token function">host</span> <span class="token operator">=</span> <span class="token string">'%'</span> where user <span class="token operator">=</span> <span class="token string">'root'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>刷新一下</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">flush privileges<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后用exit退出即可</p><h4 id="第六步：开放防火墙的3306端口"><a href="#第六步：开放防火墙的3306端口" class="headerlink" title="第六步：开放防火墙的3306端口"></a>第六步：开放防火墙的3306端口</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> firewall-cmd --add-port<span class="token operator">=</span><span class="token number">3306</span>/tcp --permanent<span class="token function">sudo</span> firewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="第七步：关闭MySQL主机查询dns"><a href="#第七步：关闭MySQL主机查询dns" class="headerlink" title="第七步：关闭MySQL主机查询dns"></a>第七步：关闭MySQL主机查询dns</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按i进入编辑模式,添加下面的代码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>skip-name-resolve<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接着重启服务：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> systemctl restart mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="第七步：设置阿里云服务器安全组规则，开放3306端口"><a href="#第七步：设置阿里云服务器安全组规则，开放3306端口" class="headerlink" title="第七步：设置阿里云服务器安全组规则，开放3306端口"></a>第七步：设置阿里云服务器安全组规则，开放3306端口</h4><p>最后使用Navicat连接，填写信息，连接成功</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 安装 </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python实现十大经典算法</title>
      <link href="/post/fbe92b6a.html"/>
      <url>/post/fbe92b6a.html</url>
      
        <content type="html"><![CDATA[<p>排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。常见的内部排序算法有：插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等。用一张图概括：</p><p><img src="/post/fbe92b6a/1.png"></p><h3 id="关于时间复杂度"><a href="#关于时间复杂度" class="headerlink" title="关于时间复杂度"></a>关于时间复杂度</h3><ol><li>平方阶 (O(n²)) 排序 各类简单排序：直接插入、直接选择和冒泡排序。</li><li>线性对数阶 (O(nlog²n)) 排序 快速排序、堆排序和归并排序。</li><li>O(n1+§)) 排序，§ 是介于 0 和 1 之间的常数。 希尔排序。</li><li>线性阶 (O(n)) 排序 基数排序，此外还有桶、箱排序。</li></ol><h3 id="关于稳定性"><a href="#关于稳定性" class="headerlink" title="关于稳定性"></a>关于稳定性</h3><p>稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序。<br>不是稳定的排序算法：选择排序、快速排序、希尔排序、堆排序。</p><p>名词解释：</p><p>n：数据规模<br>k：“桶”的个数<br>In-place：占用常数内存，不占用额外内存<br>Out-place：占用额外内存<br>稳定性：排序后 2 个相等键值的顺序和排序之前它们的顺序相同</p><h2 id="一-冒泡排序"><a href="#一-冒泡排序" class="headerlink" title="一.冒泡排序"></a>一.冒泡排序</h2><p>冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><h3 id="1-算法步骤"><a href="#1-算法步骤" class="headerlink" title="1.算法步骤"></a>1.算法步骤</h3><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><h3 id="2-Python-代码实现"><a href="#2-Python-代码实现" class="headerlink" title="2.Python 代码实现"></a>2.Python 代码实现</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> arr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>arr <span class="token operator">=</span> bubbleSort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">10</span>, <span class="token number">7</span>, <span class="token number">4</span>, <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">7</span>, <span class="token number">10</span>, <span class="token number">4</span>, <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">7</span>, <span class="token number">4</span>, <span class="token number">10</span>, <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">7</span>, <span class="token number">4</span>, <span class="token number">5</span>, <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">7</span>, <span class="token number">4</span>, <span class="token number">5</span>, <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">4</span>, <span class="token number">7</span>, <span class="token number">5</span>, <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">4</span>, <span class="token number">5</span>, <span class="token number">7</span>, <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">4</span>, <span class="token number">5</span>, <span class="token number">7</span>, <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">4</span>, <span class="token number">5</span>, <span class="token number">7</span>, <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">4</span>, <span class="token number">5</span>, <span class="token number">7</span>, <span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-选择排序"><a href="#二-选择排序" class="headerlink" title="二.选择排序"></a>二.选择排序</h2><p>选择排序是一种简单直观的排序方法，无论什么数据进去都是O(n²)的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处就是不占用额外的内存空间。 </p><h3 id="1-算法步骤-1"><a href="#1-算法步骤-1" class="headerlink" title="1.算法步骤"></a>1.算法步骤</h3><ol><li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置</li><li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li><li>重复第二步，直到所有元素均排序完毕。</li></ol><h3 id="2-Python-代码实现-1"><a href="#2-Python-代码实现-1" class="headerlink" title="2.Python 代码实现"></a>2.Python 代码实现</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 记录最小数的索引</span>        minIndex <span class="token operator">=</span> i        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">:</span>                minIndex <span class="token operator">=</span> j        <span class="token comment"># i 不是最小数时，将 i 和最小数进行交换</span>        <span class="token keyword">if</span> i <span class="token operator">!=</span> minIndex<span class="token punctuation">:</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> arr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>arr <span class="token operator">=</span> selectionSort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">10</span>, <span class="token number">7</span>, <span class="token number">4</span>, <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">4</span>, <span class="token number">7</span>, <span class="token number">10</span>, <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">4</span>, <span class="token number">5</span>, <span class="token number">10</span>, <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">4</span>, <span class="token number">5</span>, <span class="token number">7</span>, <span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三-插入排序"><a href="#三-插入排序" class="headerlink" title="三.插入排序"></a>三.插入排序</h2><p>插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><p>插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入。</p><h3 id="1-算法步骤-2"><a href="#1-算法步骤-2" class="headerlink" title="1.算法步骤"></a>1.算法步骤</h3><ol><li>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</li><li>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）</li></ol><h3 id="2-Python-代码实现-2"><a href="#2-Python-代码实现-2" class="headerlink" title="2.Python 代码实现"></a>2.Python 代码实现</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        preIndex <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span>        current <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">while</span> preIndex <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">and</span> arr<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span> <span class="token operator">></span> current<span class="token punctuation">:</span>            arr<span class="token punctuation">[</span>preIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span>            preIndex<span class="token operator">-=</span><span class="token number">1</span>        arr<span class="token punctuation">[</span>preIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> current    <span class="token keyword">return</span> arr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>arr <span class="token operator">=</span> insertionSort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span><span class="token number">10</span>, <span class="token number">2</span>, <span class="token number">7</span>, <span class="token number">4</span>, <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">10</span>, <span class="token number">7</span>, <span class="token number">4</span>, <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">7</span>, <span class="token number">10</span>, <span class="token number">4</span>, <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">4</span>, <span class="token number">7</span>, <span class="token number">10</span>, <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">4</span>, <span class="token number">5</span>, <span class="token number">7</span>, <span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四-希尔排序"><a href="#四-希尔排序" class="headerlink" title="四.希尔排序"></a>四.希尔排序</h2><p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。</p><p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；</li></ul><p>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</p><h3 id="1-算法步骤-3"><a href="#1-算法步骤-3" class="headerlink" title="1. 算法步骤"></a>1. 算法步骤</h3><ol><li>选择一个增量序列 t1，t2，……，tk，其中 ti &gt; tj, tk = 1；</li><li>按增量序列个数 k，对序列进行 k 趟排序；</li><li>每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ol><h3 id="2-Python-代码实现-3"><a href="#2-Python-代码实现-3" class="headerlink" title="2.Python 代码实现"></a>2.Python 代码实现</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">shellSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> math    gap<span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>gap <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        gap <span class="token operator">=</span> gap<span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">while</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>gap<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            j <span class="token operator">=</span> i<span class="token operator">-</span>gap            <span class="token keyword">while</span> j <span class="token operator">>=</span><span class="token number">0</span> <span class="token keyword">and</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">:</span>                arr<span class="token punctuation">[</span>j<span class="token operator">+</span>gap<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                j<span class="token operator">-=</span>gap            arr<span class="token punctuation">[</span>j<span class="token operator">+</span>gap<span class="token punctuation">]</span> <span class="token operator">=</span> temp        gap <span class="token operator">=</span> math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>gap<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> arr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>arr <span class="token operator">=</span> shellSort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span><span class="token number">5</span>, <span class="token number">2</span>, <span class="token number">7</span>, <span class="token number">4</span>, <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">4</span>, <span class="token number">5</span>, <span class="token number">7</span>, <span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的volatile关键是什么作用？怎样使用它？在Java中它跟synchronized方法有什么不同？</title>
      <link href="/post/60830d93.html"/>
      <url>/post/60830d93.html</url>
      
        <content type="html"><![CDATA[<p>volatile是变 量修饰符，而synchronized则作用于一段代码或方法；<br>看如下三句get代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i1<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">geti1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> i1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">volatile</span> <span class="token keyword">int</span> i2<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">geti2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> i2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i3<span class="token punctuation">;</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> i3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        geti1()得到存储在当前线程中i1的数值。多个线程有多个i1变量拷贝，而且这些i1之间可以互不相同。换句话说，另一个线程可能已经改 变了它线程内的i1值，而这个值可以和当前线程中的i1值不相同。事实上，Java有个思想叫“主”内存区域，这里存放了变量目前的“准确值”。每个线程 可以有它自己的变量拷贝，而这个变量拷贝值可以和“主”内存区域里存放的不同。因此实际上存在一种可能：“主”内存区域里的i1值是1，线程1里的i1值 是2，线程2里的i1值是3——这在线程1和线程2都改变了它们各自的i1值，而且这个改变还没来得及传递给“主”内存区域或其他线程时就会发生。<br>　    而geti2()得到的是“主”内存区域的i2数值。用volatile修饰后的变量不允许有不同于“主”内存区域的变量拷贝。换句话说，一个变量经 volatile修饰后在所有线程中必须是同步的；任何线程中改变了它的值，所有其他线程立即获取到了相同的值。理所当然的，volatile修饰的变量 存取时比一般变量消耗的资源要多一点，因为线程有它自己的变量拷贝更为高效。<br>　　既然volatile关键字已经实现了线程间数据同步，又要synchronized干什么呢？呵呵，它们之间有两点不同。首 先，synchronized获得并释放监视器——如果两个线程使用了同一个对象锁，监视器能强制保证代码块同时只被一个线程所执行——这是众所周知的事 实。但是，synchronized也同步内存：事实上，synchronized在“主”内存区域同步整个线程的内存。因此，执行geti3()方法做 了如下几步：</p><ol><li>线程请求获得监视this对象的对象锁（假设未被锁，否则线程等待直到锁释放）</li><li>线程内存的数据被消除，从“主”内存区域中读入（Java虚拟机能优化此步。。。[后面的不知道怎么表达,汗]）</li><li>代码块被执行</li><li>对于变量的任何改变现在可以安全地写到“主”内存区域中（不过geti3()方法不会改变变量值）</li><li>线程释放监视this对象的对象锁<br>　　因此volatile只是在线程内存和“主”内存间同步某个变量的值，而synchronized通过锁定和解锁某个监视器同步所有变量的值。显然 synchronized要比volatile消耗更多资源</li></ol><p><strong>Volatile强制要求了所有线程在使用变量的时候要去公共内存堆中获取值, 不可以偷懒使用自己的.<br>Volatile绝对不保证原子性, 原子性只能用Synchronized同步修饰符实现.</strong></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是原子操作，Java中的原子操作是什么？</title>
      <link href="/post/ef2b0ffb.html"/>
      <url>/post/ef2b0ffb.html</url>
      
        <content type="html"><![CDATA[<p>原子操作（atomic operation）意为”不可被中断的一个或一系列操作” 。处理器使用基于对缓存加锁或总线加锁的方式来实现多处理器之间的原子操作。在Java中可以通过锁和循环CAS的方式来实现原子操作。CAS操作——Compare &amp; Set，或是 Compare &amp; Swap，现在几乎所有的CPU指令都支持CAS的原子操作。</p><p>原子操作是指一个不受其他操作影响的操作任务单元。原子操作是在多线程环境下避免数据不一致必须的手段。int++并不是一个原子操作，所以当一个线程读取它的值并加1时，另外一个线程有可能会读到之前的值，这就会引发错误。</p><p>为了解决这个问题，必须保证增加操作是原子的，在JDK1.5之前我们可以使用同步技术来做到这一点。到JDK1.5，java.util.concurrent.atomic包提供了int和long类型的原子包装类，它们可以自动的保证对于他们的操作是原子的并且不需要使用同步。</p><p>java.util.concurrent这个包里面提供了一组原子类。其基本的特性就是在多线程环境下，当有多个线程同时执行这些类的实例包含的方法时，具有排他性，即当某个线程进入方法，执行其中的指令时，不会被其他线程打断，而别的线程就像自旋锁一样，一直等到该方法执行完成，才由JVM从等待队列中选择一个另一个线程进入，这只是一种逻辑上的理解。</p><p>原子类：AtomicBoolean，AtomicInteger，AtomicLong，AtomicReference</p><p>原子数组：AtomicIntegerArray，AtomicLongArray，AtomicReferenceArray</p><p>原子属性更新器：AtomicLongFieldUpdater，AtomicIntegerFieldUpdater，AtomicReferenceFieldUpdater</p><p>解决ABA问题的原子类：AtomicMarkableReference（通过引入一个boolean来反映中间有没有变过），AtomicStampedReference（通过引入一个int来累加来反映中间有没有变过）</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在java中wait和sleep方法的不同？</title>
      <link href="/post/704cf21c.html"/>
      <url>/post/704cf21c.html</url>
      
        <content type="html"><![CDATA[<p><strong>最大的不同是在等待时wait会释放锁，而sleep一直持有锁。Wait通常被用于线程间交互，sleep通常被用于暂停执行。</strong></p><p>各个状态说明：</p><h3 id="1-初始状态-NEW"><a href="#1-初始状态-NEW" class="headerlink" title="1. 初始状态 - NEW"></a>1. 初始状态 - NEW</h3><p>声明：</p><pre class="line-numbers language-none"><code class="language-none">public static final Thread.State NEW<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实现 Runnable 接口和继承 Thread 可以得到一个线程类，new 一个实例出来，线程就进入了初始状态。</p><h3 id="2-RUNNABLE"><a href="#2-RUNNABLE" class="headerlink" title="2. RUNNABLE"></a>2. RUNNABLE</h3><p>声明：</p><pre class="line-numbers language-none"><code class="language-none">public static final Thread.State RUNNABLE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.1. 就绪状态</strong></p><p>就绪状态只是说你资格运行，调度程序没有挑选到你，你就永远是就绪状态。</p><p>调用线程的 start() 方法，此线程进入就绪状态。</p><p>当前线程 sleep() 方法结束，其他线程 join() 结束，等待用户输入完毕，某个线程拿到对象锁，这些线程也将进入就绪状态。</p><p>当前线程时间片用完了，调用当前线程的 yield() 方法，当前线程进入就绪状态。</p><p>锁池里的线程拿到对象锁后，进入就绪状态。</p><p><strong>2.2. 运行中状态</strong></p><p>线程调度程序从可运行池中选择一个线程作为当前线程时线程所处的状态。这也是线程进入运行状态的唯一一种方式。</p><h3 id="3-阻塞状态-BLOCKED"><a href="#3-阻塞状态-BLOCKED" class="headerlink" title="3. 阻塞状态 - BLOCKED"></a>3. 阻塞状态 - BLOCKED</h3><p>声明：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Thread<span class="token punctuation">.</span>State</span> BLOCKED<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>阻塞状态是线程阻塞在进入synchronized关键字修饰的方法或代码块(获取锁)时的状态。</p><h3 id="4-等待-WAITING"><a href="#4-等待-WAITING" class="headerlink" title="4. 等待 - WAITING"></a>4. 等待 - WAITING</h3><p>声明：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Thread<span class="token punctuation">.</span>State</span> WAITING<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>处于这种状态的线程不会被分配 CPU 执行时间，它们要等待被显式地唤醒，否则会处于无限期等待的状态。</p><h3 id="5-超时等待-TIMED-WAITING"><a href="#5-超时等待-TIMED-WAITING" class="headerlink" title="5. 超时等待 - TIMED_WAITING"></a>5. 超时等待 - TIMED_WAITING</h3><p>声明：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Thread<span class="token punctuation">.</span>State</span> TIMED_WAITING<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>处于这种状态的线程不会被分配 CPU 执行时间，不过无须无限期等待被其他线程显示地唤醒，在达到一定时间后它们会自动唤醒。</p><h3 id="6-终止状态-TERMINATED"><a href="#6-终止状态-TERMINATED" class="headerlink" title="6. 终止状态 - TERMINATED"></a>6. 终止状态 - TERMINATED</h3><p>声明：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Thread<span class="token punctuation">.</span>State</span> TERMINATED<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当线程的 run() 方法完成时，或者主线程的 main() 方法完成时，我们就认为它终止了。这个线程对象也许是活的，但是，它已经不是一个单独执行的线程。线程一旦终止了，就不能复生。</p><p>在一个终止的线程上调用 start() 方法，会抛出 java.lang.IllegalThreadStateException 异常。</p><p><strong>以下实例演示了如何获取线程的状态：</strong></p><p>Main.java 文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Java 程序 - 演示线程状态</span><span class="token keyword">class</span> thread <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>         <span class="token comment">//  thread2  - 超时等待</span>        <span class="token keyword">try</span>        <span class="token punctuation">&#123;</span>             <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>          <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>                   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"State of thread1 while it called join() method on thread2 -"</span><span class="token operator">+</span>             <span class="token class-name">Test</span><span class="token punctuation">.</span>thread1<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">try</span>        <span class="token punctuation">&#123;</span>             <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>          <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Thread</span> thread1<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Test</span> obj<span class="token punctuation">;</span>           <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>         obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// 创建 thread1，现在是初始状态</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"State of thread1 after creating it - "</span> <span class="token operator">+</span> thread1<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// thread1 - 就绪状态</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"State of thread1 after calling .start() method on it - "</span> <span class="token operator">+</span>              thread1<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>         thread myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Thread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myThread<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// 创建 thread1，现在是初始状态</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"State of thread2 after creating it - "</span><span class="token operator">+</span> thread2<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// thread2 - 就绪状态</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"State of thread2 after calling .start() method on it - "</span> <span class="token operator">+</span>              thread2<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// moving thread1 to timed waiting state </span>        <span class="token keyword">try</span>        <span class="token punctuation">&#123;</span>             <span class="token comment">//moving - 超时等待</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>          <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"State of thread2 after calling .sleep() method on it - "</span><span class="token operator">+</span>              thread2<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token keyword">try</span>         <span class="token punctuation">&#123;</span>             <span class="token comment">// 等待 thread2 终止</span>            thread2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>          <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"State of thread2 when it has finished it's execution - "</span> <span class="token operator">+</span>              thread2<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码运行输出结果为：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">State of thread1 after creating it - NEWState of thread1 after calling .start<span class="token punctuation">(</span><span class="token punctuation">)</span> method on it - RUNNABLEState of thread2 after creating it - NEWState of thread2 after calling .start<span class="token punctuation">(</span><span class="token punctuation">)</span> method on it - RUNNABLEState of thread2 after calling .sleep<span class="token punctuation">(</span><span class="token punctuation">)</span> method on it - TIMED_WAITINGState of thread1 <span class="token keyword">while</span> it called join<span class="token punctuation">(</span><span class="token punctuation">)</span> method on thread2 -WAITINGState of thread2 when it has finished it's execution - TERMINATED<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ol><li>wait()方法会释放CPU执行权和占有的锁。</li><li>sleep(long)方法仅释放CPU使用权，锁仍然占用；线程被放入超时等待队列，与yield相比，它会使线程较长时间得不到运行。</li><li>yield()方法仅释放CPU执行权，锁仍然占用，线程会被放入就绪队列，会在短时间内再次执行。</li><li>wait和notify必须配套使用，即必须使用同一把锁调用；</li><li>wait和notify必须放在一个同步块中调用wait和notify的对象必须是他们所处同步块的锁对象。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Java中Lock接口比synchronized块的优势是什么？</title>
      <link href="/post/bcc76331.html"/>
      <url>/post/bcc76331.html</url>
      
        <content type="html"><![CDATA[<h3 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h3><p>Synchronized 只是jvm里面自己的一个协议;</p><p>而关于这个Lock 他的底层里面是有硬件支持的原子操作,各种cpu都支持的，各种平台也支持。如果需要详细理解，可以看看里面的源码，里面有一个重要的类就是AbstractQueuedSynchronizer, 它是轮询处理。</p><p>synchronized 在取不到锁的时候，会休眠一段时间，这样要说开销很大。当然这种synchronized 内部是后面的版本可以进行优化的。</p><h3 id="1-利用cpu底层机制lock有读锁与写锁的区分"><a href="#1-利用cpu底层机制lock有读锁与写锁的区分" class="headerlink" title="1.利用cpu底层机制lock有读锁与写锁的区分"></a>1.利用cpu底层机制lock有读锁与写锁的区分</h3><h4 id="（1）synchronized"><a href="#（1）synchronized" class="headerlink" title="（1）synchronized"></a>（1）synchronized</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedMap</span> <span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span> <span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span> <span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span> <span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span> <span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span> <span class="token punctuation">></span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> k<span class="token punctuation">,</span> <span class="token class-name">V</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">K</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种排斥了 写/写，读/写 读/读。</p><h4 id="（2）lock"><a href="#（2）lock" class="headerlink" title="（2）lock"></a>（2）lock</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockMap</span> <span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span> <span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span> <span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span> <span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span> <span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span> <span class="token punctuation">></span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReadWriteLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Lock</span> r <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Lock</span> w <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        w<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        r<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            r<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种排斥了 写/写 读/写 。<br>但读/读没有排斥。</p><p>也是就说读与读是多个线程可以同时读的。—-可以做为读多写少的应用。</p><h3 id="2-在于上下文的切换与锁的竞争的优化"><a href="#2-在于上下文的切换与锁的竞争的优化" class="headerlink" title="2.在于上下文的切换与锁的竞争的优化"></a>2.在于上下文的切换与锁的竞争的优化</h3><p>对于 synchronized 来说。他只有一个条件队列的，里面放着对应于不同类型的（也可以说是处理不同业务类型的）线程，那这时，你只能notifyall<br>  ，为了保证程序的正确，把所有的线程都叫起来，不管是不是你想要的业务类型的线程。这种对于性能影响是非常大的。比如10个线程在一个条件队列上等待，那么调用notifyAll 将唤醒所有的线程<br>  这个时候线程产生如下：<br>    a 它们会在锁上面产生竞争。<br>    b 它们竞争完了之后大部分又大部分wait了<br>     这两步，会导致了大量的线程上下文切换。以及大量锁的竞争。</p><p>但这个lock是没问题的。他可以对于 不同的条件创建wait-set ，比如生产者消费者模式，生产者生产一个对象，这时想唤醒消费者，只需要在相应的条件上面的wait set进行single.</p><p>对于线程安全的lock队列,与线程安全的synchronized stack代码</p><h4 id="（1）synchronized-1"><a href="#（1）synchronized-1" class="headerlink" title="（1）synchronized"></a>（1）synchronized</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductStack</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Product</span><span class="token punctuation">[</span><span class="token punctuation">]</span> products <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token class-name">Product</span> product<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token punctuation">(</span>products<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//需要重新检查一下，条件判断s  </span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" the product array is full ; "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is waiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            products<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> product<span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//为了能启动消费线程 当然也唤醒了生产线程。  </span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">Product</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//需要重新检查一下，条件判断  </span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"the product array is empty ;"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"is waiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            index<span class="token operator">--</span><span class="token punctuation">;</span>            product <span class="token operator">=</span> products<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//为了能启动 添加线程。 当然也唤醒了消费线程。  </span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> product<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（2）lock-1"><a href="#（2）lock-1" class="headerlink" title="（2）lock"></a>（2）lock</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Condition</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Lock</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductQueue</span> <span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">V</span> <span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> defaultSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">V</span><span class="token punctuation">[</span><span class="token punctuation">]</span> queue<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> total<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> tail<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> head<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Condition</span> notEmpty <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Condition</span> notFull <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ProductQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>defaultSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ProductQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">V</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">V</span> v<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            queue<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>            <span class="token operator">++</span>tail<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tail <span class="token operator">==</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            total<span class="token operator">++</span><span class="token punctuation">;</span>            notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//唤醒的是同一种类型的线程,不会浪费。  </span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">V</span> v <span class="token operator">=</span> queue<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span>            head<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            total<span class="token operator">--</span><span class="token punctuation">;</span>            notFull<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//唤醒的是同一种类型的线程,不会浪费。  </span>            <span class="token keyword">return</span> v<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> total <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> total <span class="token operator">==</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注解里面解释到了问题的根本。</p><p>notifyall 时将所有的线程，生产者，消费者都唤醒了。而此时你只想唤醒生产者，或者只想唤醒消费者，让你胡子眉毛一把抓。</p><h3 id="3-关于死锁的避免"><a href="#3-关于死锁的避免" class="headerlink" title="3.关于死锁的避免"></a>3.关于死锁的避免</h3><p>产生死锁的本质：至少有两把以上的锁，每个线程获取锁的方式不会一样。实际应用中会有如下3种情况，出现死锁。</p><h4 id="（1）-同一类对象"><a href="#（1）-同一类对象" class="headerlink" title="（1） 同一类对象"></a>（1） 同一类对象</h4><p>第一个方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">LockA</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">LockB</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二个方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">LockB</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">LockA</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        doSomeThing<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上情况的解决方案是，顺序不一样，把顺序搞一样就成。</p><h4 id="（2）-对于方法"><a href="#（2）-对于方法" class="headerlink" title="（2） 对于方法"></a>（2） 对于方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token class-name">SameObject</span> a<span class="token punctuation">,</span> <span class="token class-name">SameObject</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            doSomeThing<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里会产生死锁的可能，原因是根据参数的顺序就能有可能被锁了。 这时可以用并发包里面的tryLock最简单。</p><p>以上是在同一个类里面。</p><h4 id="（3）-两个类里面"><a href="#（3）-两个类里面" class="headerlink" title="（3） 两个类里面"></a>（3） 两个类里面</h4><p>​    在类A里面的有一个a 方法是同步的。<br>​    在类B里面的有一个b 方法是同步的。<br>​    a 里面调b方法。<br>​    b 里面调a方法。<br>​        这里就会产生死锁，因为获取锁的顺序不一样。 这种情况的解决方案是，将方法上的所有的synchronized的都去掉，换成同步块，但同步块同是将传过来的资源，进行一个copy. 这个在并发包里面的有些集合可以参考的。全局，分析锁的个数，获取的顺序。顺序好说，那怎么分析？</p><h3 id="4-怎么去分析死锁呢？"><a href="#4-怎么去分析死锁呢？" class="headerlink" title="4.怎么去分析死锁呢？"></a>4.怎么去分析死锁呢？</h3><p>a 争取用同步块，把不能同步方法，从业务角度保证开方式调用。<br>b 用线程堆栈信息来分析（kill -3）的方式。<br>c 对于业务的拆解。理论上没有死锁，但是锁管理的资源，在线程处理的时候，占时太长，将业务就要进行重构了。<br>d 加一功能代码 代码如下  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ThreadMXBean</span> tmx <span class="token operator">=</span> <span class="token class-name">ManagementFactory</span><span class="token punctuation">.</span><span class="token function">getThreadMXBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ids <span class="token operator">=</span> tmx<span class="token punctuation">.</span><span class="token function">findDeadlockedThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ids <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ThreadInfo</span><span class="token punctuation">[</span><span class="token punctuation">]</span> infos <span class="token operator">=</span> tmx<span class="token punctuation">.</span><span class="token function">getThreadInfo</span><span class="token punctuation">(</span>ids<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The following threads are deadlocked:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">ThreadInfo</span> ti<span class="token operator">:</span> infos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ti<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现在有T1、T2、T3三个线程，你怎样保证T2在T1执行完后执行，T3在T2执行完后执行？</title>
      <link href="/post/b842012a.html"/>
      <url>/post/b842012a.html</url>
      
        <content type="html"><![CDATA[<p>主要使用的join方法实现，直到当前线程执行完才会唤醒其他线程继续执行</p><p>代码案例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">1000000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程"</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"执行完毕"</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token string">"T1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token string">"T2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token string">"T3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t3<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Thread </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java - 多线程之线程间的通信方式</title>
      <link href="/post/3c42cd7b.html"/>
      <url>/post/3c42cd7b.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-同步"><a href="#1-同步" class="headerlink" title="1.同步"></a>1.同步</h3><p>多个线程通过synchronized关键字这种方式来实现线程间的通信</p><p>参考案例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyObject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//do something....</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">synchronized</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//do some other thing</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadA</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">MyObject</span> object<span class="token punctuation">;</span><span class="token comment">//省略构造方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        object<span class="token punctuation">.</span><span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadB</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">MyObject</span> object<span class="token punctuation">;</span><span class="token comment">//省略构造方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        object<span class="token punctuation">.</span><span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Run</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyObject</span> object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//线程A与线程B 持有的是同一个对象:object</span>        <span class="token class-name">ThreadA</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadA</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ThreadB</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadB</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于线程A和线程B持有同一个MyObject类的对象object，尽管这两个线程需要调用不同的方法，但是它们是同步执行的，比如：<strong>线程B需要等待线程A执行完了methodA()方法之后，它才能执行methodB()方法。这样，线程A和线程B就实现了 通信。</strong></p><p><strong>这种方式，本质上就是“共享内存”式的通信。多个线程需要访问同一个共享变量，谁拿到了锁（获得了访问权限），谁就可以执行。</strong></p><h3 id="2-while轮询的方式"><a href="#2-while轮询的方式" class="headerlink" title="2.while轮询的方式"></a>2.while轮询的方式</h3><p>参考案例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyList</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"elements"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">mylist<span class="token punctuation">.</span></span><span class="token class-name">MyList</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadA</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">MyList</span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadA</span><span class="token punctuation">(</span><span class="token class-name">MyList</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加了"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"个元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">mylist<span class="token punctuation">.</span></span><span class="token class-name">MyList</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadB</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">MyList</span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadB</span><span class="token punctuation">(</span><span class="token class-name">MyList</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==5, 线程b准备退出了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">mylist<span class="token punctuation">.</span></span><span class="token class-name">MyList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">extthread<span class="token punctuation">.</span></span><span class="token class-name">ThreadA</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">extthread<span class="token punctuation">.</span></span><span class="token class-name">ThreadB</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyList</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ThreadA</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadA</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ThreadB</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadB</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这种方式下，线程A不断地改变条件，线程ThreadB不停地通过while语句检测这个条件(list.size()==5)是否成立 ，从而实现了线程间的通信。但是<strong>这种方式会浪费CPU资源</strong>。之所以说它浪费资源，是因为JVM调度器将CPU交给线程B执行时，它没做啥“有用”的工作，只是在不断地测试 某个条件是否成立。<em>就类似于现实生活中，某个人一直看着手机屏幕是否有电话来了，而不是： 在干别的事情，当有电话来时，响铃通知TA电话来了。</em>关于线程的轮询的影响，<a href="http://www.cnblogs.com/hapjin/p/5467984.html">可参考：</a><a href="http://www.cnblogs.com/hapjin/p/5467984.html">JAVA多线程之当一个线程在执行死循环时会影响另外一个线程吗？</a></p><p>这种方式还存在另外一个问题：</p><p>轮询的条件的可见性问题，关于内存可见性问题，可参考：<a href="http://www.cnblogs.com/hapjin/p/5492880.html">JAVA多线程之volatile 与 synchronized 的比较</a>中的第一点“<strong>一，volatile关键字的可见性</strong>”</p><p>线程都是先把变量读取到本地线程栈空间，然后再去再去修改的本地变量。因此，如果线程B每次都在取本地的 条件变量，那么尽管另外一个线程已经改变了轮询的条件，它也察觉不到，这样也会造成死循环。</p><h3 id="3-wait-notify机制"><a href="#3-wait-notify机制" class="headerlink" title="3.wait/notify机制"></a>3.wait/notify机制</h3><p>参考案例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyList</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"anyString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadA</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> lock<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadA</span><span class="token punctuation">(</span><span class="token class-name">Object</span> lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lock <span class="token operator">=</span> lock<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">MyList</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"wait begin "</span>                            <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"wait end  "</span>                            <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadB</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> lock<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadB</span><span class="token punctuation">(</span><span class="token class-name">Object</span> lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lock <span class="token operator">=</span> lock<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">MyList</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">MyList</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        lock<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已经发出了通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加了"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"个元素!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Run</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ThreadA</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadA</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ThreadB</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadB</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>线程A要等待某个条件满足时(list.size()==5)，才执行操作。线程B则向list中添加元素，改变list 的size。</p><p>A,B之间如何通信的呢？也就是说，线程A如何知道 list.size() 已经为5了呢？</p><p>这里用到了Object类的 wait() 和 notify() 方法。</p><p>当条件未满足时(list.size() !=5)，线程A调用wait() 放弃CPU，并进入阻塞状态。—不像②while轮询那样占用CPU</p><p>当条件满足时，线程B调用 notify()通知 线程A，所谓通知线程A，就是唤醒线程A，并让它进入可运行状态。</p><p>这种方式的一个好处就是CPU的利用率提高了。</p><p>但是也有一些缺点：比如，线程B先执行，一下子添加了5个元素并调用了notify()发送了通知，而此时线程A还执行；当线程A执行并调用wait()时，那它永远就不可能被唤醒了。因为，线程B已经发了通知了，以后不再发通知了。这说明：<strong>通知过早，会打乱程序的执行逻辑。</strong></p><h3 id="4-管道通信"><a href="#4-管道通信" class="headerlink" title="4.管道通信"></a>4.管道通信</h3><p>在java的类库中有2个管道类：PipedWriter(允许任务向管道写)，和PipedReader(允许不同任务从同一管道中读取)。管道也可以理解为一个缓冲区，将要读写的内容存入到管道，输入输出都要从这个管道去操作，管道提供了一个封装好的解决方案。</p><p>参考案例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PipedReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PipedWriter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token comment">/** * 任务间使用管道进行输入输出 */</span><span class="token keyword">class</span> <span class="token class-name">Sender</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">PipedWriter</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PipedWriter</span> <span class="token function">getPipedWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> out<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span> c<span class="token operator">&lt;</span><span class="token string">'Z'</span><span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//随机休眠500以内毫秒</span>                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e <span class="token operator">+</span> <span class="token string">" Sender write exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e <span class="token operator">+</span> <span class="token string">" Sender sleep interrupt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Receiver</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">PipedReader</span> in<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Receiver</span><span class="token punctuation">(</span><span class="token class-name">Sender</span> sender<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">&#123;</span>        in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedReader</span><span class="token punctuation">(</span>sender<span class="token punctuation">.</span><span class="token function">getPipedWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Read: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e <span class="token operator">+</span> <span class="token string">" Receiver read exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PipedIO</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Sender</span> sender <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Receiver</span> receiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Receiver</span><span class="token punctuation">(</span>sender<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ExecutorService</span> exec <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        exec<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sender<span class="token punctuation">)</span><span class="token punctuation">;</span>        exec<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//休眠4秒钟后中断</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        exec<span class="token punctuation">.</span><span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Sender和Receiver分别代表了2个需要互相通信的任务（相当于生产者和消费者的角色)，Sender 简历一个单独的PipedWriter对象，将信息写入到管道当中，而Receiver建立的PipedReader对象必须绑定到与Sender相关联的管道中，才能保证正确读取到数据。<br>详细内容请参考《Thinking in Java》,pageId:717</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Thread </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java - 为什么等待和通知是在Object类而不是Thread中声明的？</title>
      <link href="/post/9a8914a9.html"/>
      <url>/post/9a8914a9.html</url>
      
        <content type="html"><![CDATA[<p>１.wait和notify不仅仅是普通方法或同步工具，更重要的是它们是Java中两个线程之间的通信机制 。对语言设计者而言，如果不能通过Java关键字（例如synchronized）实现此通信机制，同时又要确保这个机制对每个对象可用，那么Object类则是正确的声明位置。记住同步和等待、通知是两个不同的领域，不要把它们看成是相同的或相关的。同步是提供互斥并确保Java类的线程安全，而wait和notify是两个线程之间的通信机制。</p><p>２.每个对象都可上锁，这是在Object类而不是Thread类中声明wait和notify的另一个原因。</p><p>３.在Java中为了进入代码的临界区，线程需要锁定并等待锁定，他们不知道哪些线程持有锁，而只是知道锁被某个线程持有，并且他们应该等待取得锁，而不是去了解哪个线程在同步块内，并请求它们释放锁定。</p><p>４.Java是基于监视器的思想，在Java中，所有对象都有一个监视器。</p><p>线程在监视器上等待，为执行等待，我们需要2个参数：</p><p>​    （1）一个线程<br>​    （2）一个监视器（任何对象）<br>在Java设计中，线程不能被指定，它总是运行当前代码的线程。但是，我们可以指定监视器（这是我们称之为等待的对象）。这是一个很好的设计，因为如果我们可以让任何其他线程在所需的监视器上等待，这将导致“入侵”，导致在设计并发程序时会遇到困难。请记住，在Java中，所有在另一个线程的执行中侵入的操作都被弃用了（例如stop方法）。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中判断一个String字符串中包含某个字段</title>
      <link href="/post/19b7bc41.html"/>
      <url>/post/19b7bc41.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-判断String字符串中包含某个字段"><a href="#1-判断String字符串中包含某个字段" class="headerlink" title="1.判断String字符串中包含某个字段"></a>1.判断String字符串中包含某个字段</h2><h3 id="1-indexOf-方法"><a href="#1-indexOf-方法" class="headerlink" title="1.indexOf()方法"></a>1.indexOf()方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"~~~MICO~~~"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"MICO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：3</span>    <span class="token keyword">int</span> flag1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"FENG"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：-1</span>    <span class="token comment">//如果包含，输出这个字符串在数组中的索引（如果有重复的，则输出第一次出现的索引位置）；否则输出-1。</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-contains-方法"><a href="#2-contains-方法" class="headerlink" title="2.contains()方法"></a>2.contains()方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"~~~MICO~~~"</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"MICO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：true</span>    <span class="token keyword">boolean</span> flag1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"FENG"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：false</span>    <span class="token comment">//如果包含，输出true；否则输出false。</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//contains()方法的底层实现还是indexOf()方法！</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-判断String数组中是否包含某个字符串"><a href="#2-判断String数组中是否包含某个字符串" class="headerlink" title="2.判断String数组中是否包含某个字符串"></a>2.判断String数组中是否包含某个字符串</h2><h3 id="1-indexOf-方法-1"><a href="#1-indexOf-方法-1" class="headerlink" title="1.indexOf()方法"></a>1.indexOf()方法</h3> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"aa,bb,cc,dd"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"cc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如果包含，输出这个字符串在数组中的索引（比如此例输出2）；否则输出-1。</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-contains-方法-1"><a href="#2-contains-方法-1" class="headerlink" title="2.contains()方法"></a>2.contains()方法</h3> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"aa,bb,cc,dd"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将String数组转化为list集合</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"bh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如果包含，输出true；否则输出false。</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> String </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis简介与原理</title>
      <link href="/post/b18bb060.html"/>
      <url>/post/b18bb060.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是-MyBatis"><a href="#什么是-MyBatis" class="headerlink" title="什么是 MyBatis"></a>什么是 MyBatis</h3><p>MyBatis是一款优秀的持久层框架，它支持自定义SQL、存储过程以及高级映射。MyBatis免除了几乎所有JDBC代码以及设置结果集的工作。MyBatis可以通过简单的XML或者注解来配置和映射原始类型、接口和java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis常用命令</title>
      <link href="/post/ed3b1c3a.html"/>
      <url>/post/ed3b1c3a.html</url>
      
        <content type="html"><![CDATA[<h2 id="Redis-命令"><a href="#Redis-命令" class="headerlink" title="Redis 命令"></a>Redis 命令</h2><h3 id="一-连接"><a href="#一-连接" class="headerlink" title="一.连接"></a>一.连接</h3><h4 id="1-连接本地服务"><a href="#1-连接本地服务" class="headerlink" title="1.连接本地服务"></a>1.连接本地服务</h4><p>连接到本地的 redis 服务并执行 <strong>PING</strong> 命令，该命令用于检测 redis 服务是否启动。</p><pre class="line-numbers language-none"><code class="language-none">[root@VM-4-9-centos ~]# docker exec -it redis-test &#x2F;bin&#x2F;bashroot@dffc411e699e:&#x2F;data# redis-cli127.0.0.1:6379&gt; pingPONG127.0.0.1:6379&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-连接远程服务"><a href="#2-连接远程服务" class="headerlink" title="2.连接远程服务"></a>2.连接远程服务</h4><p>如果需要在远程 redis 服务上执行命令，同样我们使用的也是 <strong>redis-cli</strong> 命令。</p><pre class="line-numbers language-none"><code class="language-none">redis-cli -h host -p port -a password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@VM-4-9-centos ~]# docker exec -it redis-test &#x2F;bin&#x2F;bashroot@dffc411e699e:&#x2F;data# redis-cli -h 127.0.0.1 -p 6379127.0.0.1:6379&gt; pingPONG127.0.0.1:6379&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id><a href="#" class="headerlink" title></a><!--二.键(key) --></h3><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装Redis</title>
      <link href="/post/24c94d92.html"/>
      <url>/post/24c94d92.html</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-安装-Redis"><a href="#Docker-安装-Redis" class="headerlink" title="Docker 安装 Redis"></a>Docker 安装 Redis</h2><h3 id="查看可用的-Redis-版本"><a href="#查看可用的-Redis-版本" class="headerlink" title="查看可用的 Redis 版本"></a>查看可用的 Redis 版本</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@VM-4-9-centos ~<span class="token punctuation">]</span><span class="token comment"># docker search redis</span>INDEX       NAME                                       DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDdocker.io   docker.io/redis                            Redis is an <span class="token function">open</span> <span class="token builtin class-name">source</span> key-value store th<span class="token punctuation">..</span>.   <span class="token number">9554</span>      <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>docker.io   docker.io/bitnami/redis                    Bitnami Redis Docker Image                      <span class="token number">185</span>                  <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>docker.io   docker.io/sameersbn/redis                                                                  <span class="token number">83</span>                   <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>docker.io   docker.io/grokzen/redis-cluster            Redis cluster <span class="token number">3.0</span>, <span class="token number">3.2</span>, <span class="token number">4.0</span>, <span class="token number">5.0</span>, <span class="token number">6.0</span>, <span class="token number">6.2</span>      <span class="token number">78</span>docker.io   docker.io/rediscommander/redis-commander   Alpine image <span class="token keyword">for</span> redis-commander - Redis m<span class="token punctuation">..</span>.   <span class="token number">60</span>                   <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>docker.io   docker.io/redislabs/redisearch             Redis With the RedisSearch module pre-load<span class="token punctuation">..</span>.   <span class="token number">34</span>docker.io   docker.io/redislabs/redis                  Clustered in-memory database engine compat<span class="token punctuation">..</span>.   <span class="token number">30</span>docker.io   docker.io/redislabs/redisinsight           RedisInsight - The GUI <span class="token keyword">for</span> Redis                <span class="token number">30</span>docker.io   docker.io/oliver006/redis_exporter          Prometheus Exporter <span class="token keyword">for</span> Redis Metrics. Su<span class="token punctuation">..</span>.   <span class="token number">26</span>docker.io   docker.io/arm32v7/redis                    Redis is an <span class="token function">open</span> <span class="token builtin class-name">source</span> key-value store th<span class="token punctuation">..</span>.   <span class="token number">24</span>docker.io   docker.io/bitnami/redis-sentinel           Bitnami Docker Image <span class="token keyword">for</span> Redis Sentinel         <span class="token number">23</span>                   <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>docker.io   docker.io/redislabs/rejson                 RedisJSON - Enhanced JSON data <span class="token builtin class-name">type</span> proces<span class="token punctuation">..</span>.   <span class="token number">23</span>docker.io   docker.io/redislabs/redisgraph             A graph database module <span class="token keyword">for</span> Redis               <span class="token number">15</span>                   <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>docker.io   docker.io/redislabs/redismod               An automated build of redismod - latest Re<span class="token punctuation">..</span>.   <span class="token number">13</span>                   <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>docker.io   docker.io/arm64v8/redis                    Redis is an <span class="token function">open</span> <span class="token builtin class-name">source</span> key-value store th<span class="token punctuation">..</span>.   <span class="token number">12</span>docker.io   docker.io/webhippie/redis                  Docker images <span class="token keyword">for</span> Redis                         <span class="token number">11</span>                   <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>docker.io   docker.io/insready/redis-stat              Docker image <span class="token keyword">for</span> the real-time Redis monit<span class="token punctuation">..</span>.   <span class="token number">10</span>                   <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>docker.io   docker.io/s7anley/redis-sentinel-docker    Redis Sentinel                                  <span class="token number">10</span>                   <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>docker.io   docker.io/goodsmileduck/redis-cli          redis-cli on alpine                             <span class="token number">9</span>                    <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>docker.io   docker.io/circleci/redis                   CircleCI images <span class="token keyword">for</span> Redis                       <span class="token number">7</span>                    <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>docker.io   docker.io/centos/redis-32-centos7          Redis in-memory data structure store, used<span class="token punctuation">..</span>.   <span class="token number">5</span>docker.io   docker.io/clearlinux/redis                 Redis key-value data structure server with<span class="token punctuation">..</span>.   <span class="token number">3</span>docker.io   docker.io/tiredofit/redis                  Redis Server w/ Zabbix monitoring and S6 O<span class="token punctuation">..</span>.   <span class="token number">1</span>                    <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>docker.io   docker.io/wodby/redis                      Redis container image with orchestration        <span class="token number">1</span>                    <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>docker.io   docker.io/xetamus/redis-resource           forked redis-resource                           <span class="token number">0</span>                    <span class="token punctuation">[</span>OK<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="获取最新版的-Redis-镜像"><a href="#获取最新版的-Redis-镜像" class="headerlink" title="获取最新版的 Redis 镜像"></a>获取最新版的 Redis 镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@VM-4-9-centos ~<span class="token punctuation">]</span><span class="token comment"># docker pull redis:latest</span>Trying to pull repository docker.io/library/redis <span class="token punctuation">..</span>.latest: Pulling from docker.io/library/redis69692152171a: Already existsa4a46f2fd7e0: Pull completebcdf6fddc3bd: Pull complete2902e41faefa: Pull completedf3e1d63cdb1: Pull completefa57f005a60d: Pull completeDigest: sha256:7e2c6181ad5c425443b56c7c73a9cd6df24a122345847d1ea9bb86a5afc76325Status: Downloaded newer image <span class="token keyword">for</span> docker.io/redis:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看本地镜像"><a href="#查看本地镜像" class="headerlink" title="查看本地镜像"></a>查看本地镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@VM-4-9-centos ~<span class="token punctuation">]</span><span class="token comment"># docker images |grep redis</span>docker.io/redis                     latest              fad0ee7e917a        <span class="token number">7</span> days ago          <span class="token number">105</span> MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><p>使用以下命令来运行 redis 容器：</p><pre class="line-numbers language-none"><code class="language-none">[root@VM-4-9-centos ~]# docker run -itd --name redis-test -p 6379:6379 redisdffc411e699ecb26e19376c68c3d37487bf49121d344b66f146b94e11c713a38<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li><strong>-p 6379:6379</strong>：映射容器服务的 6379 端口到宿主机的 6379 端口。外部可以直接通过宿主机ip:6379 访问到 Redis 的服务。</li></ul><h3 id="安装成功"><a href="#安装成功" class="headerlink" title="安装成功"></a>安装成功</h3><p>通过 <strong>docker ps</strong> 命令查看容器的运行信息：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@VM-4-9-centos ~<span class="token punctuation">]</span><span class="token comment"># docker ps |grep redis</span>dffc411e699e        redis                     <span class="token string">"docker-entrypoint..."</span>   <span class="token number">4</span> minutes ago       Up <span class="token number">4</span> minutes        <span class="token number">0.0</span>.0.0:6379-<span class="token operator">></span><span class="token number">6379</span>/tcp                         redis-test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过 redis-cli 连接测试使用 redis 服务</p><pre class="line-numbers language-none"><code class="language-none">[root@VM-4-9-centos ~]# docker exec -it redis-test &#x2F;bin&#x2F;bashroot@dffc411e699e:&#x2F;data# redis-cli127.0.0.1:6379&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Redis </tag>
            
            <tag> 安装 </tag>
            
            <tag> 单机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux源码安装Redis</title>
      <link href="/post/703640c2.html"/>
      <url>/post/703640c2.html</url>
      
        <content type="html"><![CDATA[<h2 id="Linux源码安装Redis"><a href="#Linux源码安装Redis" class="headerlink" title="Linux源码安装Redis"></a>Linux源码安装Redis</h2><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="http://redis.io/download">http://redis.io/download</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载、解压和编译Redis：</p><pre class="line-numbers language-none"><code class="language-none">$ wget https:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-6.2.4.tar.gz$ tar xzf redis-6.2.4.tar.gz$ cd redis-6.2.4$ make<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>现在编译的二进制文件在<code>src</code> 目录中可用 。运行Redis：</p><pre class="line-numbers language-none"><code class="language-none">$ src&#x2F;redis-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>您可以使用内置客户端与 Redis 交互：</p><pre class="line-numbers language-none"><code class="language-none">$ src&#x2F;redis-cliredis&gt; set foo barOKredis&gt; get foo&quot;bar&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Redis </tag>
            
            <tag> 安装 </tag>
            
            <tag> 单机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Hexo图片无法显示问题</title>
      <link href="/post/57d980c.html"/>
      <url>/post/57d980c.html</url>
      
        <content type="html"><![CDATA[<p>版本hexo: 5.4.0</p><p>解决方案如下：</p><h3 id="next主题"><a href="#next主题" class="headerlink" title="next主题"></a>next主题</h3><p>　　1. 在根目录下配置文件<code>_config.yml</code> 中有 <code>post_asset_folder:false改为true</code>。这样在建立文件时，<code>Hexo</code>会自动建立一个与文章同名的文件夹，这样就可以把与该文章相关的所有资源（图片）都放到那个文件夹里方便后面引用。如这里我放了一张test.jpg的图片。</p><p>　　2. git bash安装插件：npm install <a href="https://github.com/7ym0n/hexo-asset-image">https://github.com/7ym0n/hexo-asset-image</a> –save（这是个修改过的插件，经测试无问题），使用这个插件来引入图片，而不是网上那些方法里说的用传统md语法相对路径的方法。</p><p>　　3. 插入图片时用这种方式：****</p><p>　　　　　<strong>其中test.jpg就是你要引用的图片，我这里就是test.jpg，后面的This is an test image是图片描述，可以自己修改。</strong></p><p>　　4. 这样就能成功显示了，测试下吧：hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</p><h3 id="Fluid主题"><a href="#Fluid主题" class="headerlink" title="Fluid主题"></a>Fluid主题</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">1</span>.png<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows安装Redis</title>
      <link href="/post/a01b8af8.html"/>
      <url>/post/a01b8af8.html</url>
      
        <content type="html"><![CDATA[<h2 id="Windows-下安装"><a href="#Windows-下安装" class="headerlink" title="Windows 下安装"></a>Windows 下安装</h2><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://github.com/tporadowski/redis/releases">https://github.com/tporadowski/redis/releases</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Redis 支持 32 位和 64 位。这个需要根据你系统平台的实际情况选择，这里我们下载 <strong>Redis-x64-5.0.10.zip</strong>压缩包并解压。<br> <img src="/post/a01b8af8/1.png"></p><span id="more"></span><p>打开文件夹，内容如下：</p><p><img src="/post/a01b8af8/2.jpg"></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>在解压目录按住Shift再点击右键选择命令窗口，运行：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">redis-server.exe redis.windows.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/post/a01b8af8/3.jpg"></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>这时候另启一个命令窗口，原来的不要关闭，不然就无法访问服务端了。</p><p>切换到 redis 目录下运行:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">redis-cli.exe -h <span class="token number">127.0</span>.0.1 -p <span class="token number">6379</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置键值对:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">set</span> myKey abc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>取出键值对:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">get myKey<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/post/a01b8af8/4.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 安装 </tag>
            
            <tag> 单机 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo安装记录</title>
      <link href="/post/93c315da.html"/>
      <url>/post/93c315da.html</url>
      
        <content type="html"><![CDATA[<h2 id="插件记录"><a href="#插件记录" class="headerlink" title="插件记录"></a>插件记录</h2><h3 id="图片插件"><a href="#图片插件" class="headerlink" title="图片插件"></a>图片插件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> hexo-asset-image --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在_config.yml配置文件中，修改为 post_asset_folder: true</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式简介</title>
      <link href="/post/362df446.html"/>
      <url>/post/362df446.html</url>
      
        <content type="html"><![CDATA[<h2 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h2><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p><p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。<span id="more"></span></p><h2 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h2><p>根据设计模式的参考书 <strong>Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素）</strong> 中所提到的，总共有 23 种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。当然，我们还会讨论另一类设计模式：J2EE 设计模式。</p><table><thead><tr><th align="left">序号</th><th align="left">模式 &amp; 描述</th><th align="left">包括</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>创建型模式</strong> 这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</td><td align="left">工厂模式（Factory Pattern）抽象工厂模式（Abstract Factory Pattern）单例模式（Singleton Pattern）建造者模式（Builder Pattern）原型模式（Prototype Pattern）</td></tr><tr><td align="left">2</td><td align="left"><strong>结构型模式</strong> 这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</td><td align="left">适配器模式（Adapter Pattern）桥接模式（Bridge Pattern）过滤器模式（Filter、Criteria Pattern）组合模式（Composite Pattern）装饰器模式（Decorator Pattern）外观模式（Facade Pattern）享元模式（Flyweight Pattern）代理模式（Proxy Pattern）</td></tr><tr><td align="left">3</td><td align="left"><strong>行为型模式</strong> 这些设计模式特别关注对象之间的通信。</td><td align="left">责任链模式（Chain of Responsibility Pattern）命令模式（Command Pattern）解释器模式（Interpreter Pattern）迭代器模式（Iterator Pattern）中介者模式（Mediator Pattern）备忘录模式（Memento Pattern）观察者模式（Observer Pattern）状态模式（State Pattern）空对象模式（Null Object Pattern）策略模式（Strategy Pattern）模板模式（Template Pattern）访问者模式（Visitor Pattern）</td></tr><tr><td align="left">4</td><td align="left"><strong>J2EE 模式</strong> 这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。</td><td align="left">MVC 模式（MVC Pattern）业务代表模式（Business Delegate Pattern）组合实体模式（Composite Entity Pattern）数据访问对象模式（Data Access Object Pattern）前端控制器模式（Front Controller Pattern）拦截过滤器模式（Intercepting Filter Pattern）服务定位器模式（Service Locator Pattern）传输对象模式（Transfer Object Pattern）</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ifconfig命令安装</title>
      <link href="/post/f4d8dc94.html"/>
      <url>/post/f4d8dc94.html</url>
      
        <content type="html"><![CDATA[<h3 id="CentOS7安装"><a href="#CentOS7安装" class="headerlink" title="CentOS7安装"></a>CentOS7安装</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum search net-toolsyum <span class="token function">install</span> net-tools.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> net </tag>
            
            <tag> ping </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鼠标箭头变为手型，移出后再变为原型</title>
      <link href="/post/4368037d.html"/>
      <url>/post/4368037d.html</url>
      
        <content type="html"><![CDATA[<p>html 中如何让鼠标箭头移到某个区域(div,input,a等标签)上就变为手型，移出后再变为原型</p><p>在区域的样式上添加：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">style="cursor:pointer;"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>样例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">cursor</span><span class="token punctuation">:</span>pointer</span><span class="token punctuation">"</span></span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">cursor</span><span class="token punctuation">:</span>pointer</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js数组操作(创建、添加、替换、删除、清空等)</title>
      <link href="/post/cbf90742.html"/>
      <url>/post/cbf90742.html</url>
      
        <content type="html"><![CDATA[<h2 id="数组属性"><a href="#数组属性" class="headerlink" title="数组属性"></a>数组属性</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><a href="http://www.w3school.com.cn/jsref/jsref_constructor_array.asp">constructor</a></td><td>返回对创建此对象的数组函数的引用。</td></tr><tr><td><a href="http://www.w3school.com.cn/jsref/jsref_length_array.asp">length</a></td><td>设置或返回数组中元素的数目。</td></tr><tr><td><a href="http://www.w3school.com.cn/jsref/jsref_prototype_array.asp">prototype</a></td><td>使您有能力向对象添加属性和方法。</td></tr></tbody></table><h2 id="一、创建数组并给数组元素赋值"><a href="#一、创建数组并给数组元素赋值" class="headerlink" title="一、创建数组并给数组元素赋值"></a><strong>一、创建数组并给数组元素赋值</strong></h2><p><strong>1.常规方式</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myCars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myCars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Saab"</span><span class="token punctuation">;</span>myCars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Volvo"</span><span class="token punctuation">;</span>myCars<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"BMW"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.简洁方式-直接实例化</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myCars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"Saab"</span><span class="token punctuation">,</span><span class="token string">"Volvo"</span><span class="token punctuation">,</span><span class="token string">"BMW"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3.字面-隐式创建</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myCars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Saab"</span><span class="token punctuation">,</span><span class="token string">"Volvo"</span><span class="token punctuation">,</span><span class="token string">"BMW"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、清空数组元素"><a href="#二、清空数组元素" class="headerlink" title="二、清空数组元素"></a><strong>二、清空数组元素</strong></h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>ary<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空数组 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 []，空数组，即被清空了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="三、删除数组元素"><a href="#三、删除数组元素" class="headerlink" title="三、删除数组元素"></a><strong>三、删除数组元素</strong></h2><p><strong>1.length属性</strong></p><p>JavaScript中Array的length属性非常有特点一一它不是只读的。因此，可以通过设置这个属性来达到从数组的末尾移除项或添加新项的目的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"grey"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个包含3个字符串的数组</span>colors<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.delete方法</strong></p><p>JavaScript提供了一个delete关键字用来删除（清除）数组元素。</p><p>要注意的是，使用delete删除元素之后数组长度不变，只是被删除元素被置为undefined了。</p><p>lang:default decode:true</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"grey"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">delete</span> colors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [undefined, "blue", "grey", "green"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.pop()栈方法</strong></p><p>JavaScript中的Array对象提供了一个pop()栈方法用于弹出并返回数组中的最后一项，某种程度上可以当做删除用。</p><p>栈数据结构的访问规则是FILO（First In Last Out，先进后出），栈操作在栈顶添加项，从栈顶移除项，使用pop()方法，它能移除数组中的最后一项并返回该项，并且数组的长度减1。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"grey"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> color <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "grey"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，在调用pop()方法时，数组返回最后一项，即”grey”，数组的元素也仅剩两项。</p><p><strong>4.shift()队列方法</strong></p><p>JavaScript中的Array对象提供了一个shift()队列方法用于弹出并返回数组中的第一项，某种程度上也可以当做删除用。</p><p>队列数据结构的访问规则是FIFO（First In First Out，先进先出），队列在列表的末端添加项，从列表的前端移除项，使用shift()方法，它能够移除数组中的第一个项并返回该项，并且数组的长度减1。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"grey"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> color <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "red"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，在调用shift()方法时，数组返回第一项，即”red”，数组的元素也仅剩两项。</p><p><strong>5.splice()操作方法</strong> </p><p>在JavaScript的Array对象中提供了一个splice()方法用于对数组进行特定的操作。splice()恐怕要算最强大的数组方法了，他的用法有很多种，在此只介绍删除数组元素的方法。在删除数组元素的时候，它可以删除任意数量的项，只需要指定2个参数：要删除的第一项的位置和要删除的项数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"grey"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> color <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// “red”</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [“blue”, “grey”]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，在调用了splice(0, 1)方法时，数组从第一项开始，删除了一项。</p><p><strong>6.迭代方法</strong></p><p>所谓的迭代方法就是用循环迭代数组元素，发现符合要删除的项则删除。用的最多的地方，可能是当数组中的元素为对象的时候，可以根据对象的某个属性（例如ID）来删除数组元素。</p><p>第一种用最常见的ForEach循环来对比元素找到之后将其删除。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"grey"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>colors<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">===</span> “red”<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到这里还要配合splice()方法去实现删除，循环只是为了找到特定的元素。另外一种思路是循环将不需要删除的元素推入到新的数组中，也能达到假性删除特定元素的目的。</p><p>第二种我们用循环中的filter方法。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"grey"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>colors <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> item <span class="token operator">!=</span> “red”<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [“blue”, “grey”]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码很简单，找出元素不是red的项数返回给colors（其实是得到了一个新的数组，并不是在原数组上进行删除操作），一定程度上也算是达到了删除特定元素的目的。</p><p><strong>7.prototype原型方法</strong></p><p>可以通过在Array的原型上添加方法来达到删除的目的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">dx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>　　<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>dx<span class="token punctuation">)</span> <span class="token operator">||</span> dx <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>　　　　<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>　　<span class="token punctuation">&#125;</span>　　<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>　　　　<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>　　　　　　<span class="token keyword">this</span><span class="token punctuation">[</span>n<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>　　　　<span class="token punctuation">&#125;</span>　　<span class="token punctuation">&#125;</span>　　<span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span>“red”<span class="token punctuation">,</span> “blue”<span class="token punctuation">,</span> “grey”<span class="token punctuation">]</span><span class="token punctuation">;</span>colors<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [“red”, “grey”]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方法其实就是自己实现一个删除的逻辑，然后把删除方法添加给了Array的原型对象，则在此环境中的所有Array对象都可以使用该方法。尽管可以这么做，但是不推荐在产品化的程序中修改原生对象的原型。道理很简单，如果只是某个实现中缺少某个方法，就在原生对象的原型中添加这个方法，那么当在另一个支持该方法的实现中运行代码时，就可能导致命名冲突。而且这样做可能会意外地导致原生方法被重写。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js如何往数组Array中添加删除元素</title>
      <link href="/post/5748c66c.html"/>
      <url>/post/5748c66c.html</url>
      
        <content type="html"><![CDATA[<p>数组常用方法：</p><p>1.pop<br>删除原数组最后一项，并返回删除元素的值；如果数组为空则返回undefined</p><p>2.push<br>将参数添加到原数组末尾，并返回数组的长度</p><p>3.concat<br>返回一个新数组，是将参数添加到原数组中构成的</p><span id="more"></span><p>4.splice(start,deleteCount,val1,val2,…)<br>从start位置开始删除deleteCount项，并从该位置起插入val1,val2,…</p><p>5.reverse<br>将数组反序</p><p>6.sort(orderfunction)<br>按指定的参数对数组进行排序</p><p>7.slice(start,end)<br>返回从原数组中指定开始下标到结束下标之间的项组成的新数组</p><p>案例：</p><p>1.数组的创建</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var arrayObj &#x3D; new Array();　&#x2F;&#x2F;创建一个数组var arrayObj &#x3D; new Array([size]);　&#x2F;&#x2F;创建一个数组并指定长度，注意不是上限，是长度var arrayObj &#x3D; new Array([element0[, element1[, ...[, elementN]]]]);　创建一个数组并赋值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>要说明的是，虽然第二种方法创建数组指定了长度，但实际上所有情况下数组都是变长的，也就是说即使指定了长度为5，仍然可以将元素存储在规定长度以外的，注意：这时长度会随之改变。</p><p>2.数组的元素的访问</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var testGetArrValue&#x3D;arrayObj[1]; &#x2F;&#x2F;获取数组的元素值arrayObj[1]&#x3D; &quot;这是新值&quot;; &#x2F;&#x2F;给数组元素赋予新的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.数组元素的添加</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">arrayObj. push([item1 [item2 [. . . [itemN ]]]]);&#x2F;&#x2F; 将一个或多个新元素添加到数组结尾，并返回数组新长度arrayObj.unshift([item1 [item2 [. . . [itemN ]]]]);&#x2F;&#x2F; 将一个或多个新元素添加到数组开始，数组中的元素自动后移，返回数组新长度arrayObj.splice(insertPos,0,[item1[, item2[, . . . [,itemN]]]]);&#x2F;&#x2F;将一个或多个新元素插入到数组的指定位置，插入位置的元素自动后移，返回&quot;&quot;。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.数组元素的删除</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">arrayObj.pop(); &#x2F;&#x2F;移除最后一个元素并返回该元素值arrayObj.shift(); &#x2F;&#x2F;移除最前一个元素并返回该元素值，数组中元素自动前移arrayObj.splice(deletePos,deleteCount); &#x2F;&#x2F;删除从指定位置deletePos开始的指定数量deleteCount的元素，数组形式返回所移除的元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>5.数组的截取和合并</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">arrayObj.slice(start, [end]); &#x2F;&#x2F;以数组的形式返回数组的一部分，注意不包括 end 对应的元素，如果省略 end 将复制 start 之后的所有元素arrayObj.concat([item1[, item2[, . . . [,itemN]]]]); &#x2F;&#x2F;将多个数组（也可以是字符串，或者是数组和字符串的混合）连接为一个数组，返回连接好的新的数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6.数组的拷贝</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">arrayObj.slice(0); &#x2F;&#x2F;返回数组的拷贝数组，注意是一个新的数组，不是指向arrayObj.concat(); &#x2F;&#x2F;返回数组的拷贝数组，注意是一个新的数组，不是指向<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>7.数组元素的排序</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">arrayObj.reverse(); &#x2F;&#x2F;反转元素（最前的排到最后、最后的排到最前），返回数组地址arrayObj.sort(); &#x2F;&#x2F;对数组元素排序，返回数组地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>8.数组元素的字符串化</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">arrayObj.join(separator); &#x2F;&#x2F;返回字符串，这个字符串将数组的每一个元素值连接在一起，中间用 separator 隔开。toLocaleString 、toString 、valueOf：可以看作是join的特殊用法，不常用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac连接mysql出现Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: YES)</title>
      <link href="/post/cc41aa37.html"/>
      <url>/post/cc41aa37.html</url>
      
        <content type="html"><![CDATA[<p>处理方法：<br><strong>1.关闭mysql的服务，点击最左上的苹果图标在系统偏好设置中，找到mysql，点击，stop</strong></p><p><strong>2.进入终端</strong></p><p>进入mysql目录</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> /usr/local/mysql/bin/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取管理员权限</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">su</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>禁止mysql验证功能，mysql会自动重启，偏好设置中的mysql状态会变成running</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">./mysqld_safe --skip-grant-tables <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3.新建一个终端窗口(cmd+T),</strong><br>输入命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> /usr/local/mysql/bin/mysql -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后输入自己电脑密码和mysql密码。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL允许root远程登录</title>
      <link href="/post/d490159b.html"/>
      <url>/post/d490159b.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-本地登陆数据库"><a href="#1-本地登陆数据库" class="headerlink" title="1.本地登陆数据库"></a>1.本地登陆数据库</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mico@MacBook-Pro ~ % mysql -u root -pEnter password:Welcome to the MySQL monitor.  Commands end with <span class="token punctuation">;</span> or <span class="token punctuation">\</span>g.Your MySQL connection <span class="token function">id</span> is <span class="token number">3845</span>Server version: <span class="token number">5.7</span>.31 MySQL Community Server <span class="token punctuation">(</span>GPL<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span>, <span class="token number">2020</span>, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'\c'</span> to <span class="token function">clear</span> the current input statement.mysql<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h4 id="2-切换mysql数据库"><a href="#2-切换mysql数据库" class="headerlink" title="2.切换mysql数据库"></a>2.切换mysql数据库</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql<span class="token operator">></span> use mysqlReading table information <span class="token keyword">for</span> completion of table and <span class="token function">column</span> namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-执行查询，查看数据库当前有访问权限的信息"><a href="#3-执行查询，查看数据库当前有访问权限的信息" class="headerlink" title="3.执行查询，查看数据库当前有访问权限的信息"></a>3.执行查询，查看数据库当前有访问权限的信息</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql<span class="token operator">></span> SELECT user, <span class="token function">host</span> FROM user<span class="token punctuation">;</span>+---------------+-----------+<span class="token operator">|</span> user          <span class="token operator">|</span> <span class="token function">host</span>      <span class="token operator">|</span>+---------------+-----------+<span class="token operator">|</span> mysql.session <span class="token operator">|</span> localhost <span class="token operator">|</span><span class="token operator">|</span> mysql.sys     <span class="token operator">|</span> localhost <span class="token operator">|</span><span class="token operator">|</span> root          <span class="token operator">|</span> localhost <span class="token operator">|</span>+---------------+-----------+<span class="token number">3</span> rows <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果显示root用户只能localhost能访问</p><h4 id="4-设置访问权限"><a href="#4-设置访问权限" class="headerlink" title="4.设置访问权限"></a>4.设置访问权限</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql<span class="token operator">></span> GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'root'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'root'</span> WITH GRANT OPTION<span class="token punctuation">;</span>Query OK, <span class="token number">0</span> rows affected, <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-刷新访问权限表"><a href="#5-刷新访问权限表" class="headerlink" title="5.刷新访问权限表"></a>5.刷新访问权限表</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql<span class="token operator">></span> FLUSH PRIVILEGES<span class="token punctuation">;</span>Query OK, <span class="token number">0</span> rows affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-重新查看用户表"><a href="#6-重新查看用户表" class="headerlink" title="6.重新查看用户表"></a>6.重新查看用户表</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql<span class="token operator">></span> SELECT user, <span class="token function">host</span> FROM user<span class="token punctuation">;</span>+---------------+-----------+<span class="token operator">|</span> user          <span class="token operator">|</span> <span class="token function">host</span>      <span class="token operator">|</span>+---------------+-----------+<span class="token operator">|</span> root          <span class="token operator">|</span> %         <span class="token operator">|</span><span class="token operator">|</span> mysql.session <span class="token operator">|</span> localhost <span class="token operator">|</span><span class="token operator">|</span> mysql.sys     <span class="token operator">|</span> localhost <span class="token operator">|</span><span class="token operator">|</span> root          <span class="token operator">|</span> localhost <span class="token operator">|</span>+---------------+-----------+<span class="token number">4</span> rows <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移除JSON对象中的某个属性</title>
      <link href="/post/f475a90b.html"/>
      <url>/post/f475a90b.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-为JSON对象添加一个属性"><a href="#1-为JSON对象添加一个属性" class="headerlink" title="1.为JSON对象添加一个属性"></a>1.为JSON对象添加一个属性</h2><p>因为JSON完全是动态的，所以给一个JSON对象添加一个属性是很简单的，如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">></span> <span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">undefined</span><span class="token operator">></span> json<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'Tom'</span><span class="token string">'Tom'</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'Tom'</span> <span class="token punctuation">&#125;</span><span class="token keyword">undefined</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><p>这样就为json对象添加了一个名为name的属性，其值为字符串’Tom’</p><h2 id="2-移出JSON对象的一个属性"><a href="#2-移出JSON对象的一个属性" class="headerlink" title="2.移出JSON对象的一个属性"></a>2.移出JSON对象的一个属性</h2><p>接送对象：var user =  {“phone”: {“key1”: “value”, “key2”: “value”}}<br>如果要移除phone属性，则使用delete user.phone;<br>如果要移除phone对象的key1属性，则使用delete  user.phone.key1<br>移出user对象key1属性：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">></span> <span class="token keyword">var</span> user <span class="token operator">=</span>  <span class="token punctuation">&#123;</span><span class="token string">"phone"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string">"key1"</span><span class="token operator">:</span> <span class="token string">"value"</span><span class="token punctuation">,</span> <span class="token string">"key2"</span><span class="token operator">:</span> <span class="token string">"value"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">undefined</span><span class="token operator">></span> <span class="token keyword">delete</span> user<span class="token punctuation">.</span>phone<span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">]</span><span class="token boolean">true</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> phone<span class="token operator">:</span> <span class="token punctuation">&#123;</span> key2<span class="token operator">:</span> <span class="token string">'value'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">undefined</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是如果要通过变量来动态指定移除某个属性，则不能通过.(点)进行操作，如：<br>var type=’key1’;<br>delete  user.phone.type;这样是错误的，因为它会把type作为phone的一个属性，当然这时type属性是不存在的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">></span> <span class="token keyword">var</span> type<span class="token operator">=</span><span class="token string">'key2'</span><span class="token punctuation">;</span><span class="token keyword">undefined</span><span class="token operator">></span> <span class="token keyword">delete</span> user<span class="token punctuation">.</span>phone<span class="token punctuation">.</span>type<span class="token punctuation">;</span><span class="token boolean">true</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> phone<span class="token operator">:</span> <span class="token punctuation">&#123;</span> key2<span class="token operator">:</span> <span class="token string">'value'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">undefined</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装并配置PHP</title>
      <link href="/post/b08df4b3.html"/>
      <url>/post/b08df4b3.html</url>
      
        <content type="html"><![CDATA[<p>一、添加EPEL和REMI存储库</p><p>运行以下命令以添加所需的存储库：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> yum -y <span class="token function">install</span> https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm<span class="token function">sudo</span> yum -y <span class="token function">install</span> https://rpms.remirepo.net/enterprise/remi-release-7.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><span id="more"></span><p>二、在CentOS 7上安装PHP 7.4版本</p><p>我们现在可以启用PHP 7.4 Remi存储库并在CentOS 7上安装PHP 7.4：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> yum -y <span class="token function">install</span> yum-utils<span class="token function">sudo</span> yum-config-manager --enable remi-php74<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在CentOS 7上安装PHP 7.4：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> yum update<span class="token function">sudo</span> yum <span class="token function">install</span> php php-cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用下一个命令安装其他软件包：</p><p>sudo yum install php-xxx</p><p>例如运行以下命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> yum <span class="token function">install</span> php  php-cli php-fpm php-mysqlnd php-zip php-devel php-gd php-mcrypt php-mbstring php-curl php-xml php-pear php-bcmath php-json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当前的PHP版本应为7.4版，如下所示：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">php -vPHP <span class="token number">7.4</span>.0RC1 <span class="token punctuation">(</span>cli<span class="token punctuation">)</span> <span class="token punctuation">(</span>built: Sep  <span class="token number">3</span> <span class="token number">2019</span> 07:45:03<span class="token punctuation">)</span> <span class="token punctuation">(</span> NTS <span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> The PHP GroupZend Engine v3.4.0-dev, Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> Zend Technologies<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要查看启用的模块，请运行：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">php --modules<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>至此，你已经在CentOS 7上成功安装了PHP 7.4，欢迎使用此版本进行PHP开发/测试。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js得到今天日期、本周、本月、本季度、本年起始和结束日期</title>
      <link href="/post/45548175.html"/>
      <url>/post/45548175.html</url>
      
        <content type="html"><![CDATA[<p>1.js得到今天日期、本周、本月、本年起始和结束日期，得到今天、昨天、明天日期。</p><pre class="line-numbers language-javas" data-language="javas"><code class="language-javas">function getDate(dates) &#123;    var dd &#x3D; new Date();    var n &#x3D; dates || 0;    dd.setDate(dd.getDate() + n);    var y &#x3D; dd.getFullYear();    var m &#x3D; dd.getMonth() + 1;    var d &#x3D; dd.getDate();    m &#x3D; m &lt; 10 ? &quot;0&quot; + m: m;    d &#x3D; d &lt; 10 ? &quot;0&quot; + d: d;    var day &#x3D; y + &quot;-&quot; + m + &quot;-&quot; + d;    return day;&#125;; getDate(dates)  &#x2F;&#x2F;dates为数字类型，0代表今日,-1代表昨日，1代表明日，返回yyyy-mm-dd格式字符串，dates不传默认代表今日。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><p>2.得到本周、上周、下周的起始、结束日期</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">function getMonday(type, dates) &#123;    var now &#x3D; new Date();    var nowTime &#x3D; now.getTime();    var day &#x3D; now.getDay();    var longTime &#x3D; 24 * 60 * 60 * 1000;    var n &#x3D; longTime * 7 * (dates || 0);    if (type &#x3D;&#x3D; &quot;s&quot;) &#123;        var dd &#x3D; nowTime - (day - 1) * longTime + n;    &#125;;    if (type &#x3D;&#x3D; &quot;e&quot;) &#123;        var dd &#x3D; nowTime + (7 - day) * longTime + n;    &#125;;    dd &#x3D; new Date(dd);    var y &#x3D; dd.getFullYear();    var m &#x3D; dd.getMonth() + 1;    var d &#x3D; dd.getDate();    m &#x3D; m &lt; 10 ? &quot;0&quot; + m: m;    d &#x3D; d &lt; 10 ? &quot;0&quot; + d: d;    var day &#x3D; y + &quot;-&quot; + m + &quot;-&quot; + d;    return day;&#125;; getMonday(type,dates)  &#x2F;&#x2F;type为字符串类型，有两种选择，&quot;s&quot;代表开始,&quot;e&quot;代表结束，dates为数字类型，不传或0代表本周，-1代表上周，1代表下周getMonday(&quot;s&quot;,1)  &#x2F;&#x2F;得到下周一的yyyy-mm-dd格式日期getMonday(&quot;e&quot;,1)  &#x2F;&#x2F;得到下周日的yyyy-mm-dd格式日期<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.得到本月、上月、下月的起始、结束日期</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">function getMonth(type, months) &#123;    var d &#x3D; new Date();    var year &#x3D; d.getFullYear();    var month &#x3D; d.getMonth() + 1;    if (Math.abs(months) &gt; 12) &#123;        months &#x3D; months % 12;    &#125;;    if (months !&#x3D; 0) &#123;        if (month + months &gt; 12) &#123;            year++;            month &#x3D; (month + months) % 12;        &#125; else if (month + months &lt; 1) &#123;            year--;            month &#x3D; 12 + month + months;        &#125; else &#123;            month &#x3D; month + months;        &#125;;    &#125;;    month &#x3D; month &lt; 10 ? &quot;0&quot; + month: month;    var date &#x3D; d.getDate();    var firstday &#x3D; year + &quot;-&quot; + month + &quot;-&quot; + &quot;01&quot;;    var lastday &#x3D; &quot;&quot;;    if (month &#x3D;&#x3D; &quot;01&quot; || month &#x3D;&#x3D; &quot;03&quot; || month &#x3D;&#x3D; &quot;05&quot; || month &#x3D;&#x3D; &quot;07&quot; || month &#x3D;&#x3D; &quot;08&quot; || month &#x3D;&#x3D; &quot;10&quot; || month &#x3D;&#x3D; &quot;12&quot;) &#123;        lastday &#x3D; year + &quot;-&quot; + month + &quot;-&quot; + 31;    &#125; else if (month &#x3D;&#x3D; &quot;02&quot;) &#123;        if ((year % 4 &#x3D;&#x3D; 0 &amp;&amp; year % 100 !&#x3D; 0) || (year % 100 &#x3D;&#x3D; 0 &amp;&amp; year % 400 &#x3D;&#x3D; 0)) &#123;            lastday &#x3D; year + &quot;-&quot; + month + &quot;-&quot; + 29;        &#125; else &#123;            lastday &#x3D; year + &quot;-&quot; + month + &quot;-&quot; + 28;        &#125;;    &#125; else &#123;        lastday &#x3D; year + &quot;-&quot; + month + &quot;-&quot; + 30;    &#125;;    var day &#x3D; &quot;&quot;;    if (type &#x3D;&#x3D; &quot;s&quot;) &#123;        day &#x3D; firstday;    &#125; else &#123;        day &#x3D; lastday;    &#125;;    return day;&#125;; getMonth(type,months)  &#x2F;&#x2F;type为字符串类型，有两种选择，&quot;s&quot;代表开始,&quot;e&quot;代表结束，months为数字类型，不传或0代表本月，-1代表上月，1代表下月getMonth(&quot;s&quot;,1)  &#x2F;&#x2F;得到下月第一天的yyyy-mm-dd格式日期getMonth(&quot;e&quot;,1)  &#x2F;&#x2F;得到下月最后一天的yyyy-mm-dd格式日期<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.得到今年、去年、明年的开始、结束日期</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">function getYear(type, dates) &#123;    var dd &#x3D; new Date();    var n &#x3D; dates || 0;    var year &#x3D; dd.getFullYear() + Number(n);    if (type &#x3D;&#x3D; &quot;s&quot;) &#123;        var day &#x3D; year + &quot;-01-01&quot;;    &#125;;    if (type &#x3D;&#x3D; &quot;e&quot;) &#123;        var day &#x3D; year + &quot;-12-31&quot;;    &#125;;    if (!type) &#123;        var day &#x3D; year + &quot;-01-01&#x2F;&quot; + year + &quot;-12-31&quot;;    &#125;;    return day;&#125;; getYear(type,dates)  &#x2F;&#x2F;type为字符串类型，有两种选择，&quot;s&quot;代表开始,&quot;e&quot;代表结束，dates为数字类型，不传或0代表今年，-1代表去年，1代表明年getYear(&quot;s&quot;,1)  &#x2F;&#x2F;得到明年第一天的yyyy-mm-dd格式日期getYear(&quot;e&quot;,1)  &#x2F;&#x2F;得到明年最后一天的yyyy-mm-dd格式日期<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.得到本季度的开始、结束日期</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">function getQuarterMonth(type)&#123;  var now &#x3D; new Date(); var nowMonth &#x3D; now.getMonth();var year &#x3D; now.getFullYear();    var quarterStartMonth &#x3D; 1;         if(nowMonth&lt;3)&#123;            quarterStartMonth &#x3D; 1;         &#125;         if(2&lt;nowMonth &amp;&amp; nowMonth&lt;6)&#123;            quarterStartMonth &#x3D; 4;         &#125;         if(5&lt;nowMonth &amp;&amp; nowMonth&lt;9)&#123;            quarterStartMonth &#x3D; 7;         &#125;         if(nowMonth&gt;8)&#123;            quarterStartMonth &#x3D; 10;         &#125;     if (type &#x3D;&#x3D; &quot;s&quot;) &#123;        var day &#x3D; year+&quot;-&quot;+quarterStartMonth+&quot;-01&quot;;     &#125;;&#x2F;&#x2F;1-3 4-6 7-9 10-12    if (type &#x3D;&#x3D; &quot;e&quot;) &#123;    if(quarterStartMonth&#x3D;&#x3D;1)&#123;    var day &#x3D; year+&quot;-&quot;+(quarterStartMonth+2)+&quot;-31&quot;;    &#125;    if(quarterStartMonth&#x3D;&#x3D;10)&#123;    var day &#x3D; year+&quot;-&quot;+(quarterStartMonth+2)+&quot;-31&quot;;    &#125;    if(quarterStartMonth&#x3D;&#x3D;4)&#123;    var day &#x3D; year+&quot;-&quot;+(quarterStartMonth+2)+&quot;-30&quot;;    &#125;    if(quarterStartMonth&#x3D;&#x3D;7)&#123;    var day &#x3D; year+&quot;-&quot;+(quarterStartMonth+2)+&quot;-30&quot;;    &#125;    &#125;;    return day;     &#125; getQuarterMonth(&quot;s&quot;,1)  &#x2F;&#x2F;得到本季度第一天的yyyy-mm-dd格式日期 getQuarterMonth(&quot;e&quot;,1)  &#x2F;&#x2F;得到本季度最后一天的yyyy-mm-dd格式日期<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 日期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7安装docker</title>
      <link href="/post/a1fb3e72.html"/>
      <url>/post/a1fb3e72.html</url>
      
        <content type="html"><![CDATA[<p>Docker从1.13版本之后采用时间线的方式作为版本号，分为社区版CE和企业版EE。</p><p>社区版是免费提供给个人开发者和小型团体使用的，企业版会提供额外的收费服务，比如经过官方测试认证过的基础设施、容器、插件等。</p><p>社区版按照stable和edge两种方式发布，每个季度更新stable版本，如17.06，17.09；每个月份更新edge版本，如17.09，17.10。</p><span id="more"></span><p> 一、安装docker</p><p>1、Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</p><p>通过 uname -r 命令查看你当前的内核版本</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">uname</span> -r<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、使用 root 权限登录 Centos。确保 yum 包更新到最新。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> yum update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、卸载旧版本(如果安装过旧版本的话)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> yum remove docker  docker-common docker-selinux docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> yum <span class="token function">install</span> -y yum-utils device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5、设置yum源</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6、可以查看所有仓库中所有docker版本，并选择特定版本安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum list docker-ce --showduplicates <span class="token operator">|</span> <span class="token function">sort</span> -r<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7、安装docker</p><p>sudo yum install docker-ce  #由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0<br>sudo yum install <FQPN>  # 例如：sudo yum install docker-ce-17.12.0.ce</FQPN></p><p>8、启动并加入开机启动</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> systemctl start docker<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>9、验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>二、问题</p><p>1、因为之前已经安装过旧版本的docker，在安装的时候报错如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Transaction check error:  <span class="token function">file</span> /usr/bin/docker from <span class="token function">install</span> of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with <span class="token function">file</span> from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64  <span class="token function">file</span> /usr/bin/docker-containerd from <span class="token function">install</span> of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with <span class="token function">file</span> from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64  <span class="token function">file</span> /usr/bin/docker-containerd-shim from <span class="token function">install</span> of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with <span class="token function">file</span> from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64  <span class="token function">file</span> /usr/bin/dockerd from <span class="token function">install</span> of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with <span class="token function">file</span> from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、卸载旧版本的包</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> yum erase docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、再次安装docker</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Centos </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
